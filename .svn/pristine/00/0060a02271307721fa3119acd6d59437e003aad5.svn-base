package com.changyou.mgp.sdk.mbi.update.ui;

import android.app.Activity;
import android.content.DialogInterface;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentTransaction;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.changyou.mgp.sdk.downloader.CYMGDownloader;
import com.changyou.mgp.sdk.downloader.bean.DownloadAppInfo;
import com.changyou.mgp.sdk.downloader.bean.ProgressInfo;
import com.changyou.mgp.sdk.downloader.constants.DownloadConstants;
import com.changyou.mgp.sdk.downloader.constants.DownloadConstants.DownloadState;
import com.changyou.mgp.sdk.downloader.listener.DownloadInitListener;
import com.changyou.mgp.sdk.downloader.listener.DownloadListener;
import com.changyou.mgp.sdk.downloader.utils.DownloadUtil;
import com.changyou.mgp.sdk.mbi.account.ui.BaseDialogFragment;
import com.changyou.mgp.sdk.mbi.config.Contants;
import com.changyou.mgp.sdk.mbi.log.CYLog;
import com.changyou.mgp.sdk.mbi.mbi.manager.CMBILogManager;
import com.changyou.mgp.sdk.mbi.update.id.UpdateResource;
import com.changyou.mgp.sdk.mbi.update.listener.NetworkStateChangeListener;
import com.changyou.mgp.sdk.mbi.update.receiver.NetworkStateReceiver;
/**
 * 
 * @ClassName: CYMGUpdateDownloadDialogFragment 
 * @Description: 下载Dialog
 * @author J.Beyond 
 * @date 2014年8月6日 上午10:33:42 
 *
 */
public class CYMGUpdateDownloadDialogFragment extends BaseDialogFragment implements DownloadListener{
	CYLog mLog = CYLog.getInstance();
	private static TextView mTvDownloadTitleTxt; 	//下载标题
	private static TextView mTvDownloadDescTxt; 	//更新文案提示
	private static TextView mTvDownloadPercentTxt;	//下载进度提示
	private static Button mDownloadOperatiosBtn;	//下载相关按钮
	private CYMGDownloader mCYMGDownloader;
	private static Activity mActivity;
	private DownloadAppInfo mAppInfo;
	private static ProgressBar mProgressBar;
	private int mDownloadState = 0;
	private NetworkStateReceiver mNetworkStateReceiver;
	private static UpdateResource mRes;
	private boolean isDownloadCompleted = false;
	private ProgressInfo mProgressInfo;
	public int getDownloadState() {
		return mDownloadState;
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View view = inflater.inflate(mRes.mgp_sdk_2_0_dialog_update_download, container,false);
		initView(view);
		initData();
		initEvent();
		return view;
	}
	
	@Override
	protected void initView(View view) {
		mTvDownloadTitleTxt = (TextView) view.findViewById(mRes.mgp_update_title_txt_tv);
		mTvDownloadDescTxt = (TextView) view.findViewById(mRes.mgp_update_desc_txt_tv);
		mTvDownloadPercentTxt = (TextView) view.findViewById(mRes.mgp_update_download_percent_txt_tv);
		mProgressBar = (ProgressBar) view.findViewById(mRes.mgp_update_download_progress_bar);
		mDownloadOperatiosBtn = (Button) view.findViewById(mRes.mgp_update_download_operatios_btn);
	}

	@Override
	protected void initData() {
		//获取到下载参数
		Bundle bundle = getArguments();
		mAppInfo = (DownloadAppInfo) bundle.getSerializable("DownloadAppInfo");
		int packageSize = bundle.getInt("package_size");
		isPreDownloadCanceled = bundle.getBoolean("isPreDownloadCanceled");
		isForceUpdate = mAppInfo.getUpdate_level() == 1 ? false :true;
		
		//绑定控件数据
//		mTvDownloadTitleTxt.setText(mAppInfo.getUpdate_title());
		String formatSize = DownloadUtil.bytesFormat(packageSize*1024);
		mTvDownloadDescTxt.setText(mAppInfo.getUpdate_description()+"("+formatSize+")");
		
		//初始化下载管理器
		mCYMGDownloader = CYMGDownloader.getInstance(mActivity);
		
		//初始化广播接收者
		mNetworkStateReceiver = new NetworkStateReceiver(mActivity, new NetworkStateChangeListener() {
			
			@Override
			public void onWifiDisconnected() {
				if (!((CYMGUpdateDialogFragmentActivity)mActivity).isWillingDownloadWithoutWifi()) {
					((CYMGUpdateDialogFragmentActivity)mActivity).changeDialogFragment(Contants.DialogFragmentTag.UPDATE_WIFI_NOTICE);
				}
				if (mDownloadState != DownloadConstants.DownloadState.FINISHED) {
					mCYMGDownloader.doPause(mAppInfo);
				}
			}
			
			@Override
			public void onNetworkDisconnected() {
				((CYMGUpdateDialogFragmentActivity)mActivity).changeDialogFragment(Contants.DialogFragmentTag.UPDATE_NETERROR_NOTICE);
			}
		});
		//注册广播
		mNetworkStateReceiver.registerReceiver();
		
		//初始化下载状态
		mCYMGDownloader.doInit(mAppInfo, new DownloadInitListener() {
			

			@Override
			public void onInitDownloadStatus(DownloadAppInfo appInfo,ProgressInfo progressInfo) {
				mLog.i("初始化下载状态："+progressInfo.toString());
				mAppInfo = appInfo;
				mProgressInfo = progressInfo;
				//更改按钮文字
				startHandler(mAppInfo);
				//判断之前是否下载完毕
				if (mAppInfo.getDownloadStatus() != DownloadState.FINISHED) {
					//初始化完毕后直接下载
					if (!isPreDownloadCanceled && mDownloadState == DownloadConstants.DownloadState.NOTSTART) {
						executeDownload();
					}else {
						mTvDownloadDescTxt.setText(mRes.mgp_game_pre_update_info_txt);
					}
				}else {
					//直接提示下载完毕
					mTvDownloadDescTxt.setText(mRes.mgp_game_pre_update_complete_info_txt);
				}
				
			}
		});
	}

	@Override
	protected void initEvent() {
		mDownloadOperatiosBtn.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View view) {
				switch (mDownloadState) {
				case DownloadConstants.DownloadState.NOTSTART:
					mCYMGDownloader.doDownload(mAppInfo, CYMGUpdateDownloadDialogFragment.this);
					break;
				case DownloadConstants.DownloadState.DOWNLOADING:
					mCYMGDownloader.doPause(mAppInfo);
					break;
				case DownloadConstants.DownloadState.PAUSE:
					
					mCYMGDownloader.doResume(mAppInfo);
					break;
				case DownloadConstants.DownloadState.RESUME:
					
					break;
				case DownloadConstants.DownloadState.FINISHED:
					mCYMGDownloader.doInstall(mAppInfo);
					
					break;
				case DownloadConstants.DownloadState.FAILED:

					break;
				}
			}
		});
	}
	
	public static CYMGUpdateDownloadDialogFragment newInstance(Activity activity,Bundle bundle){
		mActivity = activity;
		mRes = UpdateResource.getInstance(mActivity);
		if (mDownloadDialogFragment == null) {
			mDownloadDialogFragment = new CYMGUpdateDownloadDialogFragment();
			mDownloadDialogFragment.setStyle(DialogFragment.STYLE_NORMAL, mRes.mgp_sdk_2_0_update_mian_dialog);
		}
		mDownloadDialogFragment.setArguments(bundle);
		return mDownloadDialogFragment;
	}
	
	public void showDialog() {
		FragmentTransaction transaction=((FragmentActivity)mActivity).getSupportFragmentManager().beginTransaction();
		show(transaction, Contants.DialogFragmentTag.UPDATE_DOWNLOAD);
	}
	
	@Override
	public void onDismiss(DialogInterface dialog) {
		if (mDownloadState != DownloadConstants.DownloadState.FINISHED) {
			mCYMGDownloader.doPause(mAppInfo);
		}
		//判断广播接收者是否取消注册
		if (mNetworkStateReceiver != null && !mNetworkStateReceiver.isUnRegist()) {
			mNetworkStateReceiver.unRegisterReceiver();
			mNetworkStateReceiver.setUnRegist(true);
		}
		((CYMGUpdateDialogFragmentActivity)mActivity).finishActivity();
		super.onDismiss(dialog);
	}

	/**
	 * 
	 * @Title: executeDownload 
	 * @Description: 公开的执行下载的方法
	 * @param  
	 * @return void
	 * @throws
	 */
	public void executeDownload(){
		if (mCYMGDownloader != null) {
			mCYMGDownloader.doDownload(mAppInfo, this);
		}
	}
	
	/**
	 * 
	 * @Title: executeResume 
	 * @Description: 公开的执行继续下载的方法
	 * @param  
	 * @return void
	 * @throws
	 */
	public void executeResume() {
		if (mCYMGDownloader != null) {
			if (mDownloadState != DownloadConstants.DownloadState.NOTSTART) {
				mCYMGDownloader.doResume(mAppInfo);
			}else {
				mCYMGDownloader.doDownload(mAppInfo, this);
			}
		}
	}
	
	private Handler mHandler = new Handler(){
		
		@Override
		public void dispatchMessage(Message msg) {
			super.dispatchMessage(msg);
			switch (msg.what) {
			case DownloadConstants.DownloadState.NOTSTART:
				mDownloadState = DownloadConstants.DownloadState.NOTSTART;
				if (mProgressInfo != null) {
					mTvDownloadPercentTxt.setText(mProgressInfo.getPercent());
					mProgressBar.setProgress(mProgressInfo.getProgress());
				}
//				String formatSize = DownloadUtil.bytesFormat(mAppInfo.getApp_size());
//				mTvDownloadDescTxt.setText(mAppInfo.getUpdate_description()+"("+formatSize+")");
				mDownloadOperatiosBtn.setText("下载");
				break;
			case DownloadConstants.DownloadState.DOWNLOADING:
				ProgressInfo progressInfo = (ProgressInfo) msg.obj;
				mDownloadState = DownloadConstants.DownloadState.DOWNLOADING;
				mDownloadOperatiosBtn.setText("暂停");//下载中
				if (progressInfo != null) {
					mTvDownloadPercentTxt.setText(progressInfo.getPercent());
					mProgressBar.setProgress(progressInfo.getProgress());
				}
				//下载中不可按返回键
				CYMGUpdateDownloadDialogFragment.this.setCancelable(false);
				break;
			case DownloadConstants.DownloadState.PAUSE:
				mDownloadState = DownloadConstants.DownloadState.PAUSE;
				mDownloadOperatiosBtn.setText("继续");//
				
				break;
			case DownloadConstants.DownloadState.RESUME:
				mDownloadState = DownloadConstants.DownloadState.RESUME;
				mDownloadOperatiosBtn.setText("暂停");
				
				break;
			case DownloadConstants.DownloadState.FINISHED:
				CMBILogManager.printEventLog(mActivity, "0", "138002", "");
				//下载完毕后如果未安装，也不可按返回键
				CYMGUpdateDownloadDialogFragment.this.setCancelable(false);
				mDownloadState = DownloadConstants.DownloadState.FINISHED;
				mDownloadOperatiosBtn.setText("安装");
				mProgressBar.setProgress(100);
				mTvDownloadPercentTxt.setText("100%");
				break;
			case DownloadConstants.DownloadState.FAILED:
				CYMGUpdateDownloadDialogFragment.this.setCancelable(true);
				mDownloadState = DownloadConstants.DownloadState.FAILED;
				mDownloadOperatiosBtn.setText("失败");
				
				break;
			}
		}
	};
	private boolean isForceUpdate;
	private boolean isPreDownloadCanceled;
	private static CYMGUpdateDownloadDialogFragment mDownloadDialogFragment;
	
	
	private void startHandler(DownloadAppInfo appInfo){
		this.mAppInfo = appInfo;
		Message msg = Message.obtain();
		msg.what = appInfo.getDownloadStatus();
		mHandler.sendMessage(msg);
	}
	
	private void startHandler(DownloadAppInfo appInfo,ProgressInfo progressInfo){
		this.mAppInfo = appInfo;
		Message msg = Message.obtain();
		msg.what = appInfo.getDownloadStatus();
		msg.obj = progressInfo;
		mHandler.sendMessage(msg);
	}

	@Override
	public void onDownloadFailed(DownloadAppInfo appInfo, String errorInfo) {
		mLog.e("下载失败，原因："+errorInfo);
		startHandler(appInfo);
	}

	@Override
	public void onDownloadPaused(DownloadAppInfo appInfo) {
		startHandler(appInfo);
	}

	@Override
	public boolean onDownloadResume(DownloadAppInfo appInfo) {
		startHandler(appInfo);
		return false;
	}

	@Override
	public void onDownloadSuccess(DownloadAppInfo appInfo) {
		startHandler(appInfo);
		//下载完毕后自动执行安装
		if (mCYMGDownloader != null) {
			mCYMGDownloader.doInstall(mAppInfo);
		}
		//判断广播接收者是否取消注册
		if (mNetworkStateReceiver != null && !mNetworkStateReceiver.isUnRegist()) {
			mNetworkStateReceiver.unRegisterReceiver();
			mNetworkStateReceiver.setUnRegist(true);
		}
	}

	@Override
	public void onDownloadWaiting(DownloadAppInfo appInfo) {
		startHandler(appInfo);
	}

	@Override
	public void onDownloading(DownloadAppInfo appInfo, ProgressInfo progressInfo) {
		mLog.i("下载中...进度信息："+progressInfo.toString());
		((CYMGUpdateDialogFragmentActivity)mActivity).setDownloaded(true);
		startHandler(appInfo,progressInfo);
	}


}
