package com.changyou.mgp.sdk.mbi.ui.widget;

import android.content.Context;
import android.content.Intent;
import android.graphics.Canvas;
import android.graphics.PixelFormat;
import android.os.AsyncTask;
import android.os.CountDownTimer;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.view.Gravity;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.WindowManager;
import android.view.animation.AccelerateInterpolator;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.DecelerateInterpolator;
import android.view.animation.ScaleAnimation;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.LinearLayout;

import com.changyou.mgp.sdk.mbi.account.id.AccResource;
import com.changyou.mgp.sdk.mbi.account.ui.CYMGContainerActivity;
import com.changyou.mgp.sdk.mbi.config.CYMGProtocolConfig;
import com.changyou.mgp.sdk.mbi.log.CYLog;
import com.changyou.mgp.sdk.mbi.utils.SettingSPUtil;

public class CYMGFlowWindow extends LinearLayout implements OnClickListener,OnTouchListener{

	private CYLog log = CYLog.getInstance();
	//悬浮窗为合拢状态
	private static final int CLOSE = 0;
	//悬浮窗为展开状态
	private static final int EXPAND = 1;
	//悬浮窗磁性吸附到屏幕最上和最下判断的默认距离
	private static final int DEFAULT_MAGNETIC = 300;
	//磁性吸附时每频率移动距离
	private static final int PER_MAGNETIC_DISTANCE = 10;
	//磁性移动速率
	private static final int PER_MAGNETIC_TIME = 5;
	//悬浮窗变透明消息
	private static final int TRANSPARENT = 1;
	//多少秒之后变透明
	private static final int TIME_TRANSPARENT = 5;
	
	private Context mContext;
	private WindowManager mWM;
	private WindowManager.LayoutParams mParams;
	private AccResource mRes;
	private int mScreenWidth;
	private int mScreenHeight;
	private int mXInView;
	private int mYInView;
	private float mPressDownX;
	private float mPressDownY;
	private int mState;
	private boolean mAttached;
	private CountDownTimer mTimer;
	//悬浮窗是否处于透明状态
	private boolean mIsTransparent;
	
	private ImageButton mIBtn;
	private ImageButton mIBtnTransparent;
	private View mLeftView;
	private View mRightView;
	private LinearLayout mLeftContainer;
	private LinearLayout mRightContainer;
	private FrameLayout mContainer;
	
	private static CYMGFlowWindow mInstance;
	
	private CYMGFlowWindow(Context context) {
		super(context);
		this.mContext = context;
		init();
	}
	
	public static CYMGFlowWindow getInstance(Context context){
		if(mInstance == null){
			mInstance = new CYMGFlowWindow(context);
		}
		return mInstance;
	}
	
	private CYMGFlowWindow(Context context, AttributeSet attrs) {
		super(context, attrs);
		this.mContext = context;
		init();
	}
	
	private void init(){
		log.d("init");
		this.mRes = AccResource.getInstance(mContext);
		this.mWM = (WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE);
		mParams = new WindowManager.LayoutParams();
		mParams.flags = WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;
		mParams.format = PixelFormat.TRANSPARENT;
		mParams.width = WindowManager.LayoutParams.WRAP_CONTENT;
		mParams.height = WindowManager.LayoutParams.WRAP_CONTENT;
		mParams.gravity = Gravity.LEFT | Gravity.TOP;
		mParams.type = WindowManager.LayoutParams.TYPE_SYSTEM_ALERT;
		this.mLeftView = inflate(mContext, mRes.cymg_flow_win_left, null);
		this.mRightView = inflate(mContext, mRes.cymg_flow_win_right, null);
		this.mIBtn = (ImageButton)inflate(mContext, mRes.cymg_flow_win, null);
		this.mIBtn.setOnTouchListener(this);
		this.addView(mIBtn);
		this.mIBtnTransparent = (ImageButton)inflate(mContext, mRes.cymg_flow_win_transparent, null);
		this.mIBtnTransparent.setOnTouchListener(new OnTouchListener() {
			
			@Override
			public boolean onTouch(View v, MotionEvent event) {
				if(event.getAction() == MotionEvent.ACTION_DOWN){
					mWM.removeView(mIBtnTransparent);
					mWM.addView(CYMGFlowWindow.this, mParams);
				}
				return false;
			}
		});
		//计算屏幕的尺寸
		DisplayMetrics metrics = new DisplayMetrics();
		mWM.getDefaultDisplay().getMetrics(metrics);
		this.mScreenWidth = metrics.widthPixels;
		this.mScreenHeight = metrics.heightPixels;
		//如果是横屏，则需要将高宽对调
//		if(SettingSPUtil.getLandScape(mContext) == CYMGProtocolConfig.LANDSCAPE){
//			int t = mScreenWidth;
//			mScreenWidth = mScreenHeight;
//			mScreenHeight = t;
//		}
	}
	
	@Override
	protected void onLayout(boolean changed, int l, int t, int r, int b) {
		mIBtn.layout(l, t, r,b);
	}
	
	@Override
	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
		setMeasuredDimension(mContext.getResources().getDimensionPixelSize(mRes.cymg_flow_win_size)
					, mContext.getResources().getDimensionPixelSize(mRes.cymg_flow_win_size));
	}
	
	@Override
	protected boolean drawChild(Canvas canvas, View child, long drawingTime) {
		int count = getChildCount();
		return super.drawChild(canvas, child, drawingTime);
	}
	
	/**
	 * 显示悬浮窗
	 */
	public void show(){
		try {
			if(mAttached){
				log.e("had attached in window");
				mWM.updateViewLayout(this, mParams);
				return;
			}
			mWM.addView(this, mParams);
			mAttached = true;
			mTimer = new MyCountDownTimer(TIME_TRANSPARENT * 1000, 1000);
			mTimer.start();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
	
	/**
	 * 隐藏悬浮窗
	 */
	public void gone(){
		if(mAttached){
			mWM.removeView(this);
			mAttached = false;
			if(mTimer != null){
				mTimer.cancel();
			}
			mAttached = false;
		}
	}

	@Override
	public boolean onInterceptTouchEvent(MotionEvent ev) {
		switch (ev.getAction()) {
		case MotionEvent.ACTION_MOVE:
			//拦截ACTION_MOVE，交由Parent进行拖动
			return true;
		case MotionEvent.ACTION_UP:
			//不拦截ACTION_UP，由IBtn判断是否执行点击事件
			//一旦捕捉到ACTION_UP就开始透明倒计时
			mTimer = new MyCountDownTimer(TIME_TRANSPARENT * 1000, 1000);
			mTimer.start();
			return false;
		case MotionEvent.ACTION_DOWN:
			if(mTimer != null){
				mTimer.cancel();
			}
			mIBtn.setImageResource(mRes.cymg_flow_win_btn);
			//不拦截ACTION_DOWN，将ACTION_DOWN转交给IBtn，否则IBtn无法接收ACTION_UP事件
			mXInView = (int)ev.getX();
			mYInView = (int)ev.getY();
			return false;
		default:
			break;
		}
		//其他ACTION默认为不拦截
		return false;
	}
	
	@Override
	public boolean onTouch(View v, MotionEvent event) {
		switch (event.getAction()) {
		case MotionEvent.ACTION_DOWN:
			//ACTION_DOWN会被parent拦截并传递给mIBtn，此时会记录下按下时的X/Y坐标，以备ACTION_UP时判断是否为点击
			//为了精确计算是否为点击，保持float精度不变
			mPressDownX = event.getRawX();
			mPressDownY = event.getRawY();
			break;
		case MotionEvent.ACTION_UP:
			float pressUpX = event.getRawX();
			float pressUpY = event.getRawY();
			if(mPressDownX == pressUpX 
					&& mPressDownY == pressUpY){
				//如果ACTION_UP时的坐标和ACTION_DOWN的坐标一致，则表示此次交互为点击
				//下面处理点击事件的响应
				expand();
			}
			break;
		default:
			break;
		}
		return false;
	}
	
	@Override
	public boolean onTouchEvent(MotionEvent event) {
		//&ACTION_MASK是为了排除多点触控的干扰
		switch (event.getAction() & MotionEvent.ACTION_MASK) {
		case MotionEvent.ACTION_DOWN:
			
			return false;
		case MotionEvent.ACTION_UP:
			mTimer = new MyCountDownTimer(TIME_TRANSPARENT * 1000, 1000);
			mTimer.start();
			if(mState == EXPAND){
				//如果悬浮窗为展开状态，则不能拖动
				return false;
			}
			//下面计算悬浮窗目前位置距离屏幕上下左右的相对位置
			int top = (int)(event.getRawY() - event.getY());
			int left = (int)(event.getRawX() - event.getX());
			int right = (int)(mScreenWidth - left);
			int bottom = (int)(mScreenHeight - top);
			if(top < mScreenHeight / 2){
				//如果悬浮窗在屏幕上半部分
				if(top > DEFAULT_MAGNETIC){
					//如果距离屏幕顶部的距离大于默认磁性距离，则直接判断左右磁性
					if(left < right){
						//如果距离屏幕左边的距离小于距离屏幕右边的距离，则左边的磁性强，此时悬浮窗吸附到屏幕左侧
						//y轴坐标不变，X轴坐标变为0
						new MagneticMoveTask(0, mParams.y).execute();
					}else{
						//否则移动到屏幕右边，Y轴坐标不变，X轴坐标变为屏幕宽度
						new MagneticMoveTask(mScreenWidth, mParams.y).execute();
					}
				}else{
					//否则悬浮窗吸附到屏幕顶端,X轴坐标不变，Y轴坐标变为0
					new MagneticMoveTask(mParams.x, 0).execute();
				}
			}else{
				//如果悬浮窗在屏幕下半部分
				if(bottom > DEFAULT_MAGNETIC){
					//如果距离屏幕底部的距离大于默认磁性距离，则直接判断左右磁性
					if(left < right){
						//吸附到屏幕左侧，X轴变0，Y轴不变
						new MagneticMoveTask(0, mParams.y).execute();
					}else{
						//吸附到屏幕右侧，X轴变mScreenWidth，Y轴不变
						new MagneticMoveTask(mScreenWidth, mParams.y).execute();
					}
				}else{
					//吸附到屏幕底部，Y轴不变，X轴变为mScreenHeight
					new MagneticMoveTask(mParams.x, mScreenHeight).execute();
				}
			}
			break;
		case MotionEvent.ACTION_MOVE:
			if(mState == CLOSE){
				//只有在收拢状态下才可以移动
				updatePostion((int)event.getRawX(), (int)event.getRawY());
			}
			break;
		default:
			break;
		}
		return super.onTouchEvent(event);
	}
	
	/**
	 * 更新悬浮窗坐标
	 * @param x 目的坐标的X轴
	 * @param y 目的坐标的Y轴
	 */
	private void updatePostion(int x,int y){
		mParams.x = (int)(x - mXInView);
		mParams.y = (int)(y - mYInView);
		mWM.updateViewLayout(this, mParams);
	}
	
	/**
	 * 异步任务用于更新悬浮窗坐标
	 * @author xumengyang
	 *
	 */
	private class MagneticMoveTask extends AsyncTask<Void, Void, Void>{
		
		//目的X轴坐标
		private int pX;
		//目的Y轴坐标
		private int pY;
		//现X轴坐标与目的X轴坐标差值
		private int deltaX;
		//先Y轴坐标与目的Y轴坐标差值
		private int deltaY;
		
		public MagneticMoveTask(int x,int y){
			pX = x;
			pY = y;
		}
		
		@Override
		protected void onPreExecute() {
			//在磁性移动之前首先计算坐标差值
			//在拖动存在惯性（暂且这么叫吧）的情况下，会出现mParams.x为负数的情况，所以在这里取mParams.x的绝对值，下面的mParams.y也一样
			this.deltaX = pX - Math.abs(mParams.x);
			this.deltaY = pY - Math.abs(mParams.y);
		}
		
		@Override
		protected Void doInBackground(Void... params) {
			if(deltaX == 0){
				//若X轴的差值为0，则只需在Y轴移动即可
				if(deltaY > 0){
					//向下移动
					while(mParams.y <= mScreenHeight){
						mParams.y += PER_MAGNETIC_DISTANCE;
						publishProgress();
						try {
							Thread.sleep(PER_MAGNETIC_TIME);
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				}else{
					//向上移动
					while(mParams.y >= 0){
						mParams.y -= PER_MAGNETIC_DISTANCE;
						publishProgress();
						try {
							Thread.sleep(PER_MAGNETIC_TIME);
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				}
			}else{
				//若X轴差值不为0，则需要在X轴移动
				if(deltaX < 0){
					//向左移动
					while(mParams.x >= 0){
						mParams.x -= PER_MAGNETIC_DISTANCE;
						publishProgress();
						try {
							Thread.sleep(PER_MAGNETIC_TIME);
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				}else{
					//向右移动
					while(mParams.x <= mScreenWidth){
						mParams.x += PER_MAGNETIC_DISTANCE;
						publishProgress();
						try {
							Thread.sleep(PER_MAGNETIC_TIME);
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
				}
			}
			return null;
		}
		
		
		@Override
		protected void onProgressUpdate(Void... values) {
			//更新悬浮窗位置
			mWM.updateViewLayout(CYMGFlowWindow.this, mParams);
		}
		
//		@Override
//		protected void onPostExecute(Void result) {
//			//移动完成后就开始倒计时，5秒后变透明
//			
//		}
	}
	
	/**
	 * 倒计时器，倒计时五秒会将悬浮窗变透明
	 * @author xumengyang
	 *
	 */
	private class MyCountDownTimer extends CountDownTimer{
		
		public MyCountDownTimer(long millisInFuture, long countDownInterval) {
			super(millisInFuture, countDownInterval);
		}
		

		@Override
		public void onTick(long millisUntilFinished) {
		}

		@Override
		public void onFinish() {
			if(!mIsTransparent){
				log.i("MyCountDownTimer:onFinish:");
				mIBtn.setImageResource(mRes.cymg_flow_win_btn_transparent);
			}
		}
		
		
	}
	
	/**
	 * 根据悬浮窗当前的位置判断功能条的展开与收起
	 */
	private void expand(){
		int left = mParams.x;
		int right = mScreenWidth - mParams.x;
		if(mState == CLOSE){
			exeExpandOrClose(left < right);
		}
	}
	
	private void exeExpandOrClose(final boolean rightBigger){
		final View view = rightBigger ? mRightView : mLeftView;
		LinearLayout container = null;
		container = (LinearLayout)view.findViewById(mRes.cymg_flow_win_container);
		ImageButton iBtn = (ImageButton)view.findViewById(mRes.cymg_flow_win_ibtn);
		iBtn.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				ScaleAnimation closeAnim = null;
				if(rightBigger){
					closeAnim = new ScaleAnimation(1f, 0f, 1f, 1f, 1f, 1f);
				}else{
					closeAnim = new ScaleAnimation(1f, 0f, 1f, 1f, Animation.RELATIVE_TO_SELF,1f,Animation.RELATIVE_TO_SELF, 1f);
				}
				closeAnim.setDuration(300);
				closeAnim.setInterpolator(new AccelerateInterpolator());
				closeAnim.setFillAfter(true);
				final View iv = view.findViewById(mRes.cymg_flow_win_container);
				closeAnim.setAnimationListener(new AnimationListener() {
					
					@Override
					public void onAnimationStart(Animation animation) {
						// TODO Auto-generated method stub
						
					}
					
					@Override
					public void onAnimationRepeat(Animation animation) {
						// TODO Auto-generated method stub
						
					}
					
					@Override
					public void onAnimationEnd(Animation animation) {
						mState = CLOSE;
						iv.setVisibility(View.GONE);
						mIBtn.setVisibility(View.VISIBLE);
						mWM.removeViewImmediate(view);
					}
				});
				iv.startAnimation(closeAnim);
			}
		});
		ImageButton pIBtn = (ImageButton)view.findViewById(mRes.cymg_flow_win_personal_ibtn);
		pIBtn.setTag(view);
		pIBtn.setOnClickListener(this);
		ImageButton forumIBtn = (ImageButton)view.findViewById(mRes.cymg_flow_win_forum_ibtn);
		forumIBtn.setTag(view);
		forumIBtn.setOnClickListener(this);
		ImageButton ctsIBtn = (ImageButton)view.findViewById(mRes.cymg_flow_win_cts_ibtn);
		ctsIBtn.setTag(view);
		ctsIBtn.setOnClickListener(this);
		mWM.addView(view, mParams);
		mIBtn.setVisibility(View.GONE);
		container.setVisibility(View.VISIBLE);
		ScaleAnimation expandAnim = null;
		if(rightBigger){
			expandAnim = new ScaleAnimation(0, 1.0f, 1f, 1f, 1f, 1f);
		}else{
			expandAnim = new ScaleAnimation(0f, 1f, 1f, 1f, Animation.RELATIVE_TO_SELF, 1f, Animation.RELATIVE_TO_SELF, 1f);
		}
		expandAnim.setDuration(300);
		expandAnim.setInterpolator(new DecelerateInterpolator());
		expandAnim.setFillAfter(true);
		container.startAnimation(expandAnim);
	}
	
	
	@Override
	public void onClick(View v) {
		Intent intent = new Intent(mContext,CYMGContainerActivity.class);
		intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
		View contentView = (View)v.getTag();
		mWM.removeViewImmediate(contentView);
		if(v.getId() == mRes.cymg_flow_win_personal_ibtn){
			log.i("per clicked");
			intent.putExtra("type", CYMGContainerActivity.PERSONAL);
		}else if(v.getId() == mRes.cymg_flow_win_forum_ibtn){
			log.i("forum clicked");
		}else if(v.getId() == mRes.cymg_flow_win_cts_ibtn){
			log.i("cts clicked");
		}
		mContext.startActivity(intent);
	}
}
