package com.changyou.mgp.sdk.mbi.account.ui;

import java.util.HashMap;
import java.util.Map;

import org.codehaus.jackson.type.TypeReference;
import org.json.JSONObject;

import android.app.Activity;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.changyou.mgp.sdk.mbi.account.id.AccResource;
import com.changyou.mgp.sdk.mbi.account.utils.CYMGLoginTokenVerifyUtil;
import com.changyou.mgp.sdk.mbi.account.utils.CYMGLoginTokenVerifyUtil.MyLoginTokenVerifyListener;
import com.changyou.mgp.sdk.mbi.config.Contants;
import com.changyou.mgp.sdk.mbi.config.HttpContants;
import com.changyou.mgp.sdk.mbi.entity.ErrorInfo;
import com.changyou.mgp.sdk.mbi.http.MyAsyncResponseHandler;
import com.changyou.mgp.sdk.mbi.http.MyHttpClient;
import com.changyou.mgp.sdk.mbi.log.CYLog;
import com.changyou.mgp.sdk.mbi.utils.DesUtil;
import com.changyou.mgp.sdk.mbi.utils.JSONUtil;
import com.changyou.mgp.sdk.mbi.utils.NetWorkUtils;
import com.changyou.mgp.sdk.mbi.utils.SystemUtils;

public class CYMGResgisrForUserFragment extends BaseFragment implements OnClickListener{
	
	private CYLog log = CYLog.getInstance();
	
	private static final int ACC_MIN = 6;
	private static final int PSWD_MIN = 8;
	
	private Activity mActivity;
	
	private EditText mAccountET;
	private EditText mPasswordET;
	private TextView mTreatyTV;
	private Button mCommitBtn;
	
	private String mAccountStr;
	private String mPasswordStr;
	
	private CYMGLoadingDialogFragment mLoadingDialog;
	
	@Override
	public void onAttach(Activity activity) {
		super.onAttach(activity);
		this.mActivity=activity;
	}
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View view = inflater.inflate(AccResource.getInstance(mActivity).mgp_sdk_2_0_dialog_register_for_user, container, false);
		initView(view);
		initData();
		initEvent();
		return view;
	}
	
	private void initView(View view){
		mAccountET=(EditText) view.findViewById(AccResource.getInstance(mActivity).mgp_sdk_2_0_register_for_user_account_EditText);
		mPasswordET=(EditText) view.findViewById(AccResource.getInstance(mActivity).mgp_sdk_2_0_register_for_user_password_EditText);
		mTreatyTV=(TextView) view.findViewById(AccResource.getInstance(mActivity).mgp_sdk_2_0_register_for_user_treaty_TextView);
		mCommitBtn=(Button) view.findViewById(AccResource.getInstance(mActivity).mgp_sdk_2_0_register_for_user_commit_Button);
		mLoadingDialog=CYMGLoadingDialogFragment.newInewInstance(mActivity);
	}

	@Override
	protected void initData() {
		getCNFromServer();
	}

	@Override
	protected void initEvent() {
		mTreatyTV.setOnClickListener(this);
		mCommitBtn.setOnClickListener(this);
	}

	@Override
	public void onClick(View v) {
		if(v.getId()==AccResource.getInstance(mActivity).mgp_sdk_2_0_register_for_user_treaty_TextView){
			
		}else if(v.getId()==AccResource.getInstance(mActivity).mgp_sdk_2_0_register_for_user_commit_Button){
			if(checkET()){
				chengYouUserRegister();
			}
		}
	}
	
	private boolean checkET(){
		mAccountStr=mAccountET.getText().toString().toLowerCase().trim();
		mPasswordStr=mPasswordET.getText().toString();
		if(TextUtils.isEmpty(mAccountStr)){
			Toast.makeText(mActivity, AccResource.getInstance(mActivity).mgp_sdk_2_0_error_register_account_1, Toast.LENGTH_SHORT).show();
			return false;
		}else if(mAccountStr.length()<ACC_MIN){
			Toast.makeText(mActivity, AccResource.getInstance(mActivity).mgp_sdk_2_0_error_register_account_2, Toast.LENGTH_SHORT).show();
			return false;
		}else if(TextUtils.isEmpty(mPasswordStr)){
			Toast.makeText(mActivity, AccResource.getInstance(mActivity).mgp_sdk_2_0_error_register_Password_1, Toast.LENGTH_SHORT).show();
			return false;
		}else if(mPasswordStr.length()<PSWD_MIN){
			Toast.makeText(mActivity, AccResource.getInstance(mActivity).mgp_sdk_2_0_error_register_Password_2, Toast.LENGTH_SHORT).show();
			return false;
		}else if(mPasswordStr.contains(" ")){
			Toast.makeText(mActivity, AccResource.getInstance(mActivity).mgp_sdk_2_0_error_register_space, Toast.LENGTH_SHORT).show();
			return false;
		}else if(!NetWorkUtils.isNetworkConnected(mActivity)){
			Toast.makeText(mActivity, AccResource.getInstance(mActivity).mgp_sdk_2_0_error_common_net, Toast.LENGTH_SHORT).show();
			return false;
		}
		return true;
	}
	
	private void getCNFromServer(){
		String deviceid = SystemUtils.getDeviceId(mActivity);
		MyHttpClient myHttpClient=new MyHttpClient(mActivity);
		Map map=new HashMap();
		map.put("device_id", deviceid);
		myHttpClient.post(HttpContants.getURL(HttpContants.CHENGYOU_AUTO_GET_CN), map, new MyAsyncResponseHandler(){
			@Override
			public void onStart() {
				mLoadingDialog.setMessage(mActivity.getString(AccResource.getInstance(mActivity).mgp_sdk_2_0_loading_loading));
				mLoadingDialog.showDialog();
			}
			
			@Override
			public void onSuccess(int statusCode, String content) {
				log.d("content:"+content);
				try {
					mLoadingDialog.dismissDialog();
					JSONObject jsonObject=new JSONObject(content);
					String cn=jsonObject.getString("cn");
					String password=jsonObject.getString("password");
					mAccountET.setText(cn);
					mPasswordET.setText(decodePassword(password));
				} catch (Exception e) {
					log.e(e);
				}
			}
			
			@Override
			public void onFailure(int statusCode, Throwable error,
					String content) {
				log.d("content:"+content);
				try {
					mLoadingDialog.dismissDialog();
				} catch (Exception e) {
					log.e(e);
				}
			}
		});
	}
	
	private void chengYouUserRegister(){
		String deviceid = SystemUtils.getDeviceId(mActivity);
		MyHttpClient myHttpClient=new MyHttpClient(mActivity);
		Map map=new HashMap();
		map.put("account", mAccountStr);
		map.put("password", encryptPassword(mPasswordStr));
		map.put("device_id", deviceid);
		myHttpClient.post(HttpContants.getURL(HttpContants.CHENGYOU_USER_REGISTER), map, new MyAsyncResponseHandler(){
			@Override
			public void onStart() {
				mLoadingDialog.setMessage(mActivity.getString(AccResource.getInstance(mActivity).mgp_sdk_2_0_loading_register));
				mLoadingDialog.showDialog();
			}
			
			@Override
			public void onSuccess(int statusCode, String content) {
				log.d("content:"+content);
				try {
					mLoadingDialog.dismissDialog();
					if(!TextUtils.isEmpty(content)){
						JSONObject jsonObject=new JSONObject(content);
						String uid=jsonObject.getString("uid");
						String token=jsonObject.getString("token");
						new CYMGLoginTokenVerifyUtil().loginTokenVerify(mActivity, Contants.ACC_TYPE_CHENGYOU+mAccountStr,uid, token,Contants.LOGIN_CHENGYOU_TYPE, new MyLoginTokenVerifyListener() {
							
							@Override
							public void onStart() {
								mLoadingDialog.setMessage(mActivity.getString(AccResource.getInstance(mActivity).mgp_sdk_2_0_loading_verify));
								mLoadingDialog.showDialog();
							}
							
							@Override
							public void onSuccess() {
								mLoadingDialog.dismissDialog();
							}
							
							@Override
							public void onFailure() {
								mLoadingDialog.dismissDialog();
							}
						});
					}else{
						Toast.makeText(mActivity, AccResource.getInstance(mActivity).mgp_sdk_2_0_error_common_server, Toast.LENGTH_SHORT).show();
					}
				} catch (Exception e) {
					log.e(e);
				}
			}
			
			@Override
			public void onFailure(int statusCode, Throwable error,
					String content) {
				log.d("content:"+content);
				try {
					mLoadingDialog.dismissDialog();
					if (!TextUtils.isEmpty(content)) {
						ErrorInfo info = JSONUtil.getMapper().readValue(content,new TypeReference<ErrorInfo>() {});
						if (info != null) {
							Toast.makeText(mActivity, info.getClient_message(), Toast.LENGTH_SHORT).show();
						} else {
							Toast.makeText(mActivity, AccResource.getInstance(mActivity).mgp_sdk_2_0_error_common_server, Toast.LENGTH_SHORT).show();
						}
					} else {
						Toast.makeText(mActivity, AccResource.getInstance(mActivity).mgp_sdk_2_0_error_common_server, Toast.LENGTH_SHORT).show();
					}
				} catch (Exception e) {
					log.e(e);
				}
			}
		});
	}
	
	private String decodePassword(String password) {
		String result = null;
		try {
			result = new DesUtil().decrypt(password);
		} catch (Exception e) {
			log.e(e);
		}
		return result;
	}
	
	private String encryptPassword(String password) {
		String result = null;
		try {
			result = new DesUtil().encrypt(password);
		} catch (Exception e) {
			log.e(e);
		}
		return result;
	}

}
