package com.changyou.mgp.sdk.mbi.platform;

import java.util.HashMap;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;

import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.os.Bundle;
import android.text.TextUtils;

import com.changyou.mgp.sdk.mbi.channel.CYMGFunHelper;
import com.changyou.mgp.sdk.mbi.common.CYMGCallBackManager;
import com.changyou.mgp.sdk.mbi.common.CYMGCallback;
import com.changyou.mgp.sdk.mbi.config.CYMGFunID;
import com.changyou.mgp.sdk.mbi.config.CYMGPrompt;
import com.changyou.mgp.sdk.mbi.config.CYMGProtocolKeys;
import com.changyou.mgp.sdk.mbi.config.HttpContants;
import com.changyou.mgp.sdk.mbi.http.MyAsyncResponseHandler;
import com.changyou.mgp.sdk.mbi.http.MyHttpClient;
import com.changyou.mgp.sdk.mbi.log.CYLog;
import com.changyou.mgp.sdk.mbi.utils.Base64;
import com.changyou.mgp.sdk.mbi.utils.MetaDataValueUtils;

public class CYMGPayHelper implements CYMGFunHelper{

	private static CYMGPayHelper mInstance;
	
	public static class PARAM{
		public static final String UID = "uid";
		public static final String GOODS_REGIST_ID = "goodsRegistID";
		public static final String PRICE = "price";
		public static final String ORDER_ID = "orderID";
	}
	
	private static final int RETRY = 5;//验证订单请求最多重复请求次数
	private static final int TIME_OUT = 1000 * 10;//请求超时时间
	private static final int RETRY_INTERVAL = 5 * 1000;
	
	private CYLog log = CYLog.getInstance();
	private int mRetryCount;
	private Timer mTimer;
	private boolean mValidated;//订单验证是否成功
	private boolean mValidating;
	private Activity mActivity;
	
	private CYMGPayHelper(){
		this.mTimer = new Timer();
	}
	
	public static CYMGPayHelper getInstance(){
		if(mInstance == null){
			mInstance = new CYMGPayHelper();
		}
		return mInstance;
	}
	
	public void setContext(Activity activity){
		this.mActivity = activity;
	}
	
	/**
	 * 
	 * 功能描述：支付成功
	 *
	 * @author 徐萌阳(xumengyang)
	 * @param @param uid 
	 * @param @param goodsRegistID
	 * @param @param orderID
	 * @return void
	 * @throws JSONException 
	 * @date 2014-2-19 下午7:32:55
	 *
	 */
	public void paySuccess(final String uid,final String goodsRegistID,final String orderID,final String price){
		log.d("orderID="+orderID);
		mTimer = new Timer();
		mTimer.schedule(new TimerTask() {
			
			@Override
			public void run() {
				if(!mValidated && mRetryCount < RETRY){
					validateOrder(uid, goodsRegistID, orderID, price);
				}else{
					try {
						JSONObject result = new JSONObject();
						result.put(CYMGProtocolKeys.STATE_CODE, CYMGPrompt.CODE_PAYING);
						result.put(CYMGProtocolKeys.MSG, CYMGPrompt.getContentByCode(CYMGPrompt.CODE_PAYING));
						JSONObject data = new JSONObject();
						data.put(CYMGProtocolKeys.UID, uid);
						data.put(CYMGProtocolKeys.ORDER_ID, orderID);
						data.put(CYMGProtocolKeys.PRICE, price);
						result.put(CYMGProtocolKeys.DATA, data);
						getCallBack().onFinished(result.toString());
						mTimer.cancel();
					} catch (Exception e) {
						log.e(e);
					}
				}
			}
		}, 0, RETRY_INTERVAL);
		finishActivity();
	}
	
	/**
	 * 
	 * 功能描述：支付异常，返回JSON格式 {"error_code":-1,"error_msg":"支付失败"}
	 *
	 * @author 徐萌阳(xumengyang)
	 * @param @param errorCode
	 * @return void
	 * @date 2014-2-25 下午4:15:37
	 *
	 */
	public void payException(int errorCode){
		JSONObject obj = new JSONObject();
		try {
			obj.put(CYMGProtocolKeys.STATE_CODE, errorCode);
			obj.put(CYMGProtocolKeys.MSG, CYMGPrompt.getContentByCode(errorCode));
			getCallBack().onFinished(obj.toString());
			finishActivity();
		} catch (Exception e) {
			log.e(e);
		}
	}
	
	/**
	 * 
	 * 功能描述：从服务器验证订单支付结果，将支付结果回调给接入方。
	 * 若成功支付则返回JSON格式 {"error_code":1,"error_msg":"支付成功","data":{"uid":"1"}}
	 *
	 * @author 徐萌阳(xumengyang)
	 * @param @param uid
	 * @param @param goodsRegistID
	 * @param @param orderID
	 * @param @param price
	 * @return void
	 * @date 2014-2-25 下午3:41:24
	 *
	 */
	private void validateOrder(final String uid,final String goodsRegistID,final String orderID,final String price){
		log.d("validateOrder");
		if(mValidating){
			return;
		}
		String receipt = getReceipt(goodsRegistID, orderID, price);
		MyHttpClient client = new MyHttpClient(mActivity);
		client.setMaxRetriesAndTimeout(RETRY, TIME_OUT);
		Map<String,String> params = new HashMap<String, String>();
		params.put("account_id", uid);
		params.put("user_id", uid);
		params.put("goods_register_id", goodsRegistID);
		params.put("receipt", receipt);
		client.post(HttpContants.VERIFY_ORDER, params, new MyAsyncResponseHandler(){
			
			@Override
			public void onStart() {
				mValidating = true;
			}
			
			@Override
			public void onSuccess(int statusCode, String content) {
				log.d("validatePayment:content="+content);
				mRetryCount = 0;
				mValidating = false;
				if(!TextUtils.isEmpty(content)){
					try {
						JSONObject obj = new JSONObject(content);
						if(obj.has("message")){
							if(obj.getString("message").equals("success")){
								mValidated = true;
								mTimer.cancel();
								JSONObject result = new JSONObject();
								result.put(CYMGProtocolKeys.STATE_CODE, CYMGPrompt.CODE_PAY_SUCCESS);
								result.put(CYMGProtocolKeys.MSG, CYMGPrompt.getContentByCode(CYMGPrompt.CODE_PAY_SUCCESS));
								JSONObject data = new JSONObject();
								data.put(CYMGProtocolKeys.UID, uid);
								data.put(CYMGProtocolKeys.ORDER_ID, orderID);
								data.put(CYMGProtocolKeys.PRICE, price);
								result.put(CYMGProtocolKeys.DATA, data);
								getCallBack().onFinished(result.toString());
							}
						}
					} catch (Exception e) {
						log.e(e);
					}
				}else{
					log.e("content is null");
				}
			}
			
			@Override
			public void onFailure(Throwable error, String content) {
				log.e("validatePayment:error="+content);
				mValidating = false;
				mRetryCount++;
			}
			
			@Override
			public void onRetry() {
				log.d("onRetry");
			}
		});
	}
	
	/**
	 * 
	 * 功能描述：将registID/orderID/price进行Base64加密生成Receipt
	 *
	 * @author 徐萌阳(xumengyang)
	 * @param @param goodsRegistID
	 * @param @param orderID
	 * @param @param price
	 * @param @return
	 * @return String
	 * @date 2014-2-20 上午11:25:19
	 *
	 */
	private String getReceipt(String goodsRegistID,String orderID,String price){
		try {
			JSONObject obj = new JSONObject();
			obj.put("orderId", orderID);
			obj.put("goodsPrice", price);
			obj.put("goodsRegisterId", goodsRegistID);
			return Base64.encode(obj.toString().getBytes());
		} catch (Exception e) {
			log.e(e);
		}
		return null;
	}

	public CYMGCallback getCallBack() {
		return CYMGCallBackManager.getAndRemoveCallBack(CYMGFunID.PAY);
	}
	
	/**
	 * 
	 * 功能描述：检测必须参数，若全部合法则返回true，否则返回false并调用callback告知接入者
	 *
	 * @author 徐萌阳(xumengyang)
	 * @param 
	 * @return void
	 * @date 2014-3-3 下午4:33:23
	 *
	 */
	public boolean checkNesessaryParam(Bundle b){
		String uid = b.getString(CYMGProtocolKeys.UID);
		String token = b.getString(CYMGProtocolKeys.TOKEN);
		String appName = b.getString(CYMGProtocolKeys.APP_NAME);
		String pushInfo = b.getString(CYMGProtocolKeys.PUSH_INFO);
		if(uid == null){
			if(getCallBack() != null){
				getCallBack().onFinished(getErrorJson(CYMGProtocolKeys.UID));
			}
			return false;
		}
		if(token == null){
			if(getCallBack() != null){
				getCallBack().onFinished(getErrorJson(CYMGProtocolKeys.TOKEN));
			}
			return false;
		}
		if(appName == null){
			if(getCallBack() != null){
				getCallBack().onFinished(getErrorJson(CYMGProtocolKeys.APP_NAME));
			}
			return false;
		}
		if(pushInfo == null){
			if(getCallBack() != null){
				getCallBack().onFinished(getErrorJson(CYMGProtocolKeys.PUSH_INFO));
			}
			return false;
		}
		return true;
	}
	
	/**
	 * 
	 * 功能描述：以JSON格式返回错误信息，{“error_code”:-3,"msg":"uid is null"}
	 * 
	 *
	 * @author 徐萌阳(xumengyang)
	 * @param @param key
	 * @param @return
	 * @return String
	 * @date 2014-3-3 下午4:44:43
	 *
	 */
	private String getErrorJson(String key){
		try {
			JSONObject obj = new JSONObject();
			obj.put("error_no", CYMGPrompt.CODE_EMPTY_PARAM);
			obj.put("msg", key+" is null");
			return obj.toString();
		} catch (Exception e) {
			log.e(e);
		}
		return null;
	}
	
	private void finishActivity(){
		String channelId = MetaDataValueUtils.getChannelID(mActivity);
		if(!"4001".equals(channelId)){
			this.mActivity.finish();
		}
	}
}
