package com.changyou.mgp.sdk.mbi.channel.impl;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;

import com.changyou.mgp.sdk.mbi.account.id.AccResource;
import com.changyou.mgp.sdk.mbi.channel.CYMGChannel;
import com.changyou.mgp.sdk.mbi.channel.CYMGChannelEntity;
import com.changyou.mgp.sdk.mbi.common.CYMGCallbackHelper;
import com.changyou.mgp.sdk.mbi.config.CYMGPrompt;
import com.changyou.mgp.sdk.mbi.config.CYMGProtocolConfig;
import com.changyou.mgp.sdk.mbi.config.CYMGProtocolKeys;
import com.changyou.mgp.sdk.mbi.config.Params;
import com.changyou.mgp.sdk.mbi.entity.GoodsItem;
import com.changyou.mgp.sdk.mbi.log.CYLog;
import com.changyou.mgp.sdk.mbi.platform.CYMGPayHelper;
import com.changyou.mgp.sdk.mbi.platform.CYMGPlatformConfiguration;
import com.changyou.mgp.sdk.mbi.utils.MetaDataValueUtils;
import com.changyou.mgp.sdk.mbi.utils.NetWorkUtils;
import com.changyou.mgp.sdk.mbi.utils.StringUtils;
import com.changyou.mgp.sdk.mbi.utils.SystemUtils;
import com.duoku.platform.DkErrorCode;
import com.duoku.platform.DkPlatform;
import com.duoku.platform.DkPlatformSettings;
import com.duoku.platform.DkPlatformSettings.GameCategory;
import com.duoku.platform.DkProtocolConfig;
import com.duoku.platform.DkProtocolKeys;
import com.duoku.platform.IDKSDKCallBack;
import com.duoku.platform.ui.DKContainerActivity;
import com.duoku.platform.ui.DKPaycenterActivity;

public class CYMGDuokuImpl implements CYMGChannel {
	
    private CYLog log = CYLog.getInstance();

	@Override
	public void init(CYMGPlatformConfiguration config) {
		Context context = config.getmContext();
		// 特别注意：请在onCreate中进行初始化，在游戏主activity中的onDestory中进行资源释放，详情请参照本activity的onDestory方法，如不释放会出现crash等问题。
		DkPlatformSettings appInfo = new DkPlatformSettings();
		appInfo.setGameCategory(GameCategory.ONLINE_Game);
		appInfo.setAppid(MetaDataValueUtils.getDuokuAppId(context));// 应用ID，由多酷分配
		appInfo.setAppkey(MetaDataValueUtils.getDuokuAppKey(context));// 应用Key，由多酷分配
		appInfo.setOrient(config.getmScreenOrientation() == CYMGProtocolConfig.LANDSCAPE 
				? DkPlatformSettings.SCREEN_ORIENTATION_LANDSCAPE : DkPlatformSettings.SCREEN_ORIENTATION_PORTRAIT);
		DkPlatform.init((Activity)context, appInfo); // 初始化多酷SDK
		
//		// 设置SDK的横竖屏显示
//		int screenOrientation = config.getmScreenOrientation();
//		if (screenOrientation == ActivityInfo.SCREEN_ORIENTATION_SENSOR_PORTRAIT) {
//			DkPlatform.getInstance().dkSetScreenOrientation(
//					DkPlatformSettings.SCREEN_ORIENTATION_PORTRAIT);
//		}else {
//			DkPlatform.getInstance().dkSetScreenOrientation(
//					DkPlatformSettings.SCREEN_ORIENTATION_LANDSCAPE);
//		}
		// 回调给接入方，告知初始化成功
		CYMGCallbackHelper.callbackResult(CYMGCallbackHelper.getCommonResult(CYMGPrompt.CODE_INIT_SUCCESS, null));
		//设置悬浮窗回调，目前悬浮窗中仅切换帐号功能支持回调，暂时只需处理这一种情况。不设置该回调或者设置错误回调，将无法通过上线测试。
		DkPlatform.setDKSuspendWindowCallBack(new IDKSDKCallBack() {
			@Override
			public void onResponse(String arg0) {
				try {
					JSONObject obj = new JSONObject(arg0);
					if(obj.getInt(DkProtocolKeys.FUNCTION_STATE_CODE) == DkErrorCode.DK_CHANGE_USER){
						CYMGCallbackHelper.callbackResult(CYMGCallbackHelper.getCommonResult(CYMGPrompt.CODE_CHANGE_USER, null));
					}
				} catch (Exception e) {
					log.e(e);
				}
			}
		});
//		DkPlatform.dkSetOnUserLogoutListener(new OnUserLogoutLister() {
//			@Override
//			public void onUserLogout() {
//				CYMGCallbackHelper.callbackResult(CYMGCallbackHelper.getCommonResult(CYMGPrompt.CODE_LOGOUT_SUCCESS, null));
//				//重启应用
////				final Intent intent = context.getPackageManager().getLaunchIntentForPackage(context.getPackageName());  
////		        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  
////		        context.startActivity(intent); 
////		        ((Activity)context).finish();
//			}
//		});
	}
	
	
	@Override
	public void doLogin(CYMGChannelEntity entity) {
		final Context context = entity.getmContext();
		if (entity == null) {
			log.e("MGPDuokuImpl#doPay#doLogin---->>entity is null");
			return;
		}
		if (context == null) {
			log.e("MGPDuokuImpl#doPay#doLogin---->>context is null");
			return;
		}
		final String userIp = NetWorkUtils.getLocalIpAddress(context);
		final String deviceid = SystemUtils.getDeviceId(context);
		final String appid = MetaDataValueUtils.getDuokuAppId(context);
		final String appkey = MetaDataValueUtils.getDuokuAppKey(context);
		final String appSceret = MetaDataValueUtils.getDuokuAppSceret(context);
		final String channelId = context.getString(AccResource.getInstance(context).mgp_channel_duoku);
		DkPlatform.invokeActivity((Activity)entity.getmContext(), getLoginIntent(entity.getmContext()),new IDKSDKCallBack() {
			
			@Override
			public void onResponse(String arg0) {
				try {
					JSONObject obj = new JSONObject(arg0);
					int loginState = obj.getInt(DkProtocolKeys.FUNCTION_STATE_CODE);
					String userName = obj.getString(DkProtocolKeys.USER_NAME);
					String uid = obj.getString(DkProtocolKeys.USER_ID);
					String session = obj.getString(DkProtocolKeys.USER_SESSIONID);
					switch (loginState) {
					case DkErrorCode.DK_LOGIN_SUCCESS:
						//登录成功
						Bundle b = new Bundle();
						b.putString(CYMGProtocolKeys.UID, uid);
						b.putString(CYMGProtocolKeys.APP_SESSIONID_DUOKU, session);
						b.putString(CYMGProtocolKeys.USERIP, userIp);
						b.putString(CYMGProtocolKeys.DEVICEID, deviceid);
						b.putString(CYMGProtocolKeys.APP_ID_DUOKU, appid);
						b.putString(CYMGProtocolKeys.APP_KEY_DUOKU, appkey);
						b.putString(CYMGProtocolKeys.APP_SCERET_DUOKU, appSceret);
						b.putString(CYMGProtocolKeys.CHANNEL_ID,channelId);
						b.putString(CYMGProtocolKeys.OPCODE, "10001");
						CYMGCallbackHelper.callbackResult(CYMGCallbackHelper.getLoginResult(CYMGPrompt.CODE_LOGIN_SUCCESS, b, context));
						break;
					case DkErrorCode.DK_LOGIN_CANCELED:
						//取消登录
						CYMGCallbackHelper.callbackResult(CYMGCallbackHelper.getLoginResult(CYMGPrompt.CODE_LOGIN_FAILED, null,context));
						break;
					case DkErrorCode.DK_NEEDLOGIN:
						//30天未登录 或其他设备登陆，登录状态失效
						CYMGCallbackHelper.callbackResult(CYMGCallbackHelper.getLoginResult(CYMGPrompt.CODE_NEED_LOGIN, null, context));
						break;
					default:
						break;
					}
				} catch (Exception e) {
					log.e(e);
				}
			}
		});
//		DkPlatform.getInstance().dkLogin((Activity) context,
//				new OnLoginProcessListener() {
//
//					@Override
//					public void onLoginProcess(int paramInt) {
//						switch (paramInt) {
//						case DkErrorCode.DK_LOGIN_SUCCESS:
//							//Caution：此处请勿使用username去标识用户，一定要使用uid去标识用户
//							// 获取用户信息
//							DkBaseUserInfo baseInfo = DkPlatform.getInstance()
//									.dkGetMyBaseInfo(context);
//							String uid = baseInfo.getUid();
//							String token = baseInfo.getSessionId();
//							Bundle bundle = new Bundle();
//							bundle.putString(CYMGProtocolKeys.UID, uid);
//							bundle.putString(CYMGProtocolKeys.APP_SESSIONID_DUOKU, token);
//							bundle.putString(CYMGProtocolKeys.USERIP, userIp);
//							bundle.putString(CYMGProtocolKeys.DEVICEID, deviceid);
//							bundle.putString(CYMGProtocolKeys.APP_ID_DUOKU, appid);
//							bundle.putString(CYMGProtocolKeys.APP_KEY_DUOKU, appkey);
//							bundle.putString(CYMGProtocolKeys.APP_SCERET_DUOKU, appSceret);
//							bundle.putString(CYMGProtocolKeys.CHANNEL_ID, channelId);
//							bundle.putString(CYMGProtocolKeys.OPCODE, "10001");
//							CYMGCallbackHelper.callbackResult(CYMGCallbackHelper.getLoginResult(CYMGPrompt.CODE_LOGIN_SUCCESS, bundle,context));
//							break;
//						case DkErrorCode.DK_LOGIN_CANCELED:
//							CYMGCallbackHelper.callbackResult(CYMGCallbackHelper.getLoginResult(CYMGPrompt.CODE_LOGIN_FAILED, null,context));
//							break;
//						}
//					}
//				});
	}
	
	private Intent getLoginIntent(Context context){
		Bundle b = new Bundle();
		b.putInt(DkProtocolKeys.FUNCTION_CODE, DkProtocolConfig.FUNCTION_LOGIN);
		Intent intent = new Intent(context,DKContainerActivity.class);
		intent.putExtras(b);
		return intent;
	}

	@Override
	public void doPay(CYMGChannelEntity entity) {
		final Context context = entity.getmContext();
		if (context == null) {
			log.e("MGPDuokuImpl#doPay---->>context is null");
			return;
		}
		Bundle bundle = entity.getBundle();
		final String uid = bundle.getString(Params.UID);
		String orderId = bundle.getString(Params.ORDER_ID);
		final GoodsItem item = (GoodsItem)bundle.getSerializable(Params.GOODSITEM);
//		String amount = "1";
		String amount = item.getGoods_price();
//		int amountInt=(int) Double.parseDouble(amount);
		int exchangeRatio = 1;
		
//		Map<String, String> map = new HashMap<String, String>();
//		map.put("uid", uid);
//		map.put("goodsRegisterId", item.getGoods_register_id());
//		map.put("appid", MetaDataValueUtils.getDuokuAppKey(context));
		
//		JSONObject jsonObject = new JSONObject();
//		if (!StringUtils.isEmpty(map.toString())) {
//			try {
//				Iterator it = map.entrySet().iterator();
//				while (it.hasNext()) {
//					Map.Entry pairs = (Map.Entry) it.next();
//					jsonObject.put(pairs.getKey().toString(),
//							pairs.getValue());
//				}
//			} catch (JSONException e) {
//				e.printStackTrace();
//			}
//		}
		/**
		 * 退出支付中心回调接口，cp收到该通知后可根据参数四去自家服务器查询订单是否成功。
		 * Listener中会有doOrderCheck的回调方法，当参数为true时进行订单查询
		 */
//		OnExitChargeCenterListener mOnExitChargeCenterListener = new OnExitChargeCenterListener() {
//			
//			@Override
//			public void doOrderCheck(boolean needcheck, String orderid) {
//				// 参数中的orderid是调用充值接口时开发者传入的，原样返回
//				log.d("MGPDuokuImpl#doPay#doOrderCheck----->>SUCCESS,orderid == " + orderid);
//				CYMGPayHelper cymgPayHelper = CYMGPayHelper.getInstance();
//				cymgPayHelper.setContext((Activity)context);
//				if (needcheck) {
//					//退出充值中心,此时应去查询订单
//					log.d("MGPDuokuImpl#doPay#doOrderCheck---->>orderid:" + orderid);
//					cymgPayHelper.paySuccess(uid,
//							 item, orderid);
//				} else {
//					//此时无需查询订单状态
//					log.e("MGPDuokuImpl#doPay#doOrderCheck----->>FAILED!!");
//					cymgPayHelper.payException(CYMGPrompt.CODE_PAY_FAILED);
//				}
//			}
//		};
		
		// 参数说明
		// 参数一：进入支付中心的当前activity
		// 参数二：兑换比例，如1酷币兑换100游戏币，则兑换比例为100
		// 参数三：游戏币名称，如金币、符石
		// 参数四：cp生成的订单号，充值结束后，多酷服务器会通知业务服务器该订单号及充值结果
		// 参数五：定额支付消费金额（人民币），如购买1元的物品或者游戏币，则amount为1；若不需要定额支付则传入0
		// 参数六：支付描述，cp可以在此处自定义字段完成自己的需求，若不需要传入空串，请勿传null
		// 参数七：退出支付中心回调接口，cp收到该通知后可根据参数四去自家服务器查询订单是否成功
		// 此处订单号strOrderId在退出支付中心时，将原样返回给开发者
		try {
			JSONObject ctsInfo = new JSONObject();
			ctsInfo.put("appid", MetaDataValueUtils.getDuokuAppKey(context));
			ctsInfo.put("goodsRegisterId", item.getGoods_register_id());
			ctsInfo.put("uid", uid);
			DkPlatform.invokeActivity(context, getRechargeIntent(context
					, amount
					, exchangeRatio
					, item.getGoods_name()
					, orderId
					, ctsInfo.toString()), new IDKSDKCallBack() {
						
						@Override
						public void onResponse(String arg0) {
							try {
								JSONObject obj = new JSONObject(arg0);
								int stateCode = obj.getInt(DkProtocolKeys.FUNCTION_STATE_CODE);
								String orderId = (!obj.isNull(DkProtocolKeys.FUNCTION_ORDER_ID)) ? obj.getString(DkProtocolKeys.FUNCTION_ORDER_ID) : "";
								if(stateCode == DkErrorCode.DK_ORDER_NEED_CHECK){
									CYMGPayHelper.getInstance().paySuccess(uid, item, orderId);
								}else if(stateCode == DkErrorCode.DK_ORDER_NOT_CHECK){
									CYMGPayHelper.getInstance().payException(CYMGPrompt.CODE_PAY_FAILED);
								}
							} catch (Exception e) {
								log.e(e);
							}
						}
					});
		} catch (Exception e) {
			log.e(e);
		}
//		DkPlatform.getInstance().dkUniPayForCoin((Activity)context, exchangeRatio, item.getGoods_name(), orderId, amountInt, 
//				jsonObject.toString(), mOnExitChargeCenterListener);
	}
	
	/**
	 * 参数说明
	 * @param amount				定额支付消费金额（人民币），如购买1元的物品或者游戏币，则amount为1；若不需要定额支付则传入0
	 * @param exchangeRatio	兑换比例，如1酷币兑换100游戏币，则兑换比例为100
	 * @param strGamebiName	游戏币名称，如金币、符石、元宝等
	 * @param strOrderId			cp生成的订单号，充值结束后，多酷服务器会通知业务服务器该订单号及充值结果
	 * @param strPayDesc			支付描述，cp可以在此处自定义字段完成自己的需求，若不需要传入空串，请勿传null
	 * @return							返回Intent对象
	 */
	private Intent getRechargeIntent(Context context,String amount , int exchangeRatio , String strGamebiName , String strOrderId , String strPayDesc) {
		Bundle bundle = new Bundle(); 
		bundle.putInt(DkProtocolKeys.FUNCTION_CODE , DkProtocolConfig.FUNCTION_Pay); 
		bundle.putString(DkProtocolKeys.FUNCTION_AMOUNT, amount);  								// 金额（转换成String）
		bundle.putString(DkProtocolKeys.FUNCTION_EXCHANGE_RATIO, exchangeRatio + "");  	 	// 兑换比例 （转换成String）
		bundle.putString(DkProtocolKeys.FUNCTION_ORDER_ID , strOrderId);									// 订单号
		bundle.putString(DkProtocolKeys.FUNCTION_PAY_DESC, strPayDesc);   								// 支付描述
		bundle.putString(DkProtocolKeys.FUNCTION_GAMEBI_NAME, strGamebiName) ; 					// 游戏币名称
		Intent intent = new Intent(context, DKPaycenterActivity.class);
		intent.putExtras(bundle);
		return intent;
	}

	

	@Override
	public void doLogout(CYMGChannelEntity entity) {
		DkPlatform.doDKUserLogout();
		CYMGCallbackHelper.callbackResult(CYMGCallbackHelper.getCommonResult(CYMGPrompt.CODE_LOGOUT_SUCCESS, null));
	}

	@Override
	public void doDestroy(CYMGChannelEntity entity) {
		Context context = entity.getmContext();
		if (context == null) {
			log.e("MGPDuokuImpl#doDestroy---->>context is null");
			return;
		}
		//释放资源
		DkPlatform.destroy(entity.getmContext());
	}

	@Override
	public void doCustomerService(CYMGChannelEntity entity) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void doShowUserCenter(CYMGChannelEntity entity) {
//		Context context = entity.getmContext();
//		DkPlatform.dkAccountManager((Activity) context);
	}


	@Override
	public void doResume(CYMGChannelEntity entity) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void doPause(CYMGChannelEntity entity) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void doStop(CYMGChannelEntity entity) {
		// TODO Auto-generated method stub
		
	}

}
