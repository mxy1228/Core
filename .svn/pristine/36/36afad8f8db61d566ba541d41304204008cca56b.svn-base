package com.changyou.mgp.sdk.mbi.account.ui;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.codehaus.jackson.type.TypeReference;

import android.app.Activity;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentTransaction;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.Toast;

import com.changyou.mgp.sdk.mbi.R;
import com.changyou.mgp.sdk.mbi.account.utils.CYMGLoginTokenVerifyUtil.MyLoginTokenVerifyListener;
import com.changyou.mgp.sdk.mbi.account.utils.CYMGLoginTokenVerifyUtil;
import com.changyou.mgp.sdk.mbi.config.Contants;
import com.changyou.mgp.sdk.mbi.config.HttpContants;
import com.changyou.mgp.sdk.mbi.db.CYMGAccBean;
import com.changyou.mgp.sdk.mbi.entity.ErrorInfo;
import com.changyou.mgp.sdk.mbi.entity.LoginInfo;
import com.changyou.mgp.sdk.mbi.http.MyAsyncResponseHandler;
import com.changyou.mgp.sdk.mbi.http.MyHttpClient;
import com.changyou.mgp.sdk.mbi.log.CYLog;
import com.changyou.mgp.sdk.mbi.utils.DesUtil;
import com.changyou.mgp.sdk.mbi.utils.JSONUtil;
import com.changyou.mgp.sdk.mbi.utils.NetWorkUtils;
import com.changyou.mgp.sdk.mbi.utils.SystemUtils;

public class CYMGLoginChangYouDialogFragment extends BaseDialogFragment implements OnClickListener{
	
	private CYLog log = CYLog.getInstance();
	
	private static final int ACC_MIN = 5;
	private static final int PSWD_MIN = 4;
	
	private static Activity mActivity;
	
	private ImageButton mBackBtn;
	private ImageButton mCloseBtn;
	private ImageButton mForgetBtn;
	private EditText mAccountET;
	private EditText mPasswordET;
	private Button mLoginBtn;
	
	private String mAccountStr;
	private String mPasswordStr;
	
	private CYMGLoadingDialogFragment mLoadingDialog;
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View view=inflater.inflate(R.layout.mgp_sdk_2_0_dialog_changyou_login, container,false);
		initView(view);
		initData();
		initEvent();
		return view;
	}
	

	@Override
	protected void initView(View view) {
		mBackBtn=(ImageButton) view.findViewById(R.id.mgp_sdk_2_0_login_changyou_back_ImageButton);
		mCloseBtn=(ImageButton) view.findViewById(R.id.mgp_sdk_2_0_login_changyou_close_ImageButton);
		mForgetBtn=(ImageButton) view.findViewById(R.id.mgp_sdk_2_0_login_changyou_forget_ImageButton);
		mAccountET=(EditText) view.findViewById(R.id.mgp_sdk_2_0_login_changyou_account_EditText);
		mPasswordET=(EditText) view.findViewById(R.id.mgp_sdk_2_0_login_changyou_password_EditText);
		mLoginBtn=(Button) view.findViewById(R.id.mgp_sdk_2_0_login_changyou_login_Button);
		mLoadingDialog=CYMGLoadingDialogFragment.newInewInstance(mActivity);
		mLoadingDialog.setMessage(mActivity.getString(R.string.mgp_sdk_2_0_loading_login));
	}

	@Override
	protected void initData() {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void initEvent() {
		mBackBtn.setOnClickListener(this);
		mCloseBtn.setOnClickListener(this);
		mForgetBtn.setOnClickListener(this);
		mLoginBtn.setOnClickListener(this);
	}
	
	public static CYMGLoginChangYouDialogFragment newInewInstance(Activity activity,Bundle bundle){
		mActivity=activity;
		CYMGLoginChangYouDialogFragment cYMGChangYouLoginDialogFragment=new CYMGLoginChangYouDialogFragment();
		cYMGChangYouLoginDialogFragment.setArguments(bundle);
		cYMGChangYouLoginDialogFragment.setStyle(DialogFragment.STYLE_NORMAL, R.style.mgp_sdk_2_0_mian_dialog);
		return cYMGChangYouLoginDialogFragment;
	}

	@Override
	public void onClick(View v) {
		if(v.getId()==R.id.mgp_sdk_2_0_login_changyou_back_ImageButton){
			dismiss();
		}else if(v.getId()==R.id.mgp_sdk_2_0_login_changyou_close_ImageButton){
			mActivity.finish();
		}else if(v.getId()==R.id.mgp_sdk_2_0_login_changyou_forget_ImageButton){
			((CYMGMainDialogFragmentActivity)mActivity).changeDialogFragment(Contants.DialogFragmentTag.FIND_PASSWORD, null);
		}else if(v.getId()==R.id.mgp_sdk_2_0_login_changyou_login_Button){
			if(checkET()){
				changYouLogin();
			}
		}
	}
	
	private boolean checkET(){
		mAccountStr=mAccountET.getText().toString().toLowerCase().trim();
		mPasswordStr=mPasswordET.getText().toString();
		if(TextUtils.isEmpty(mAccountStr)){
			Toast.makeText(mActivity, R.string.mgp_sdk_2_0_error_login_account, Toast.LENGTH_SHORT).show();
			return false;
		}else if(mAccountStr.length()<ACC_MIN){
			Toast.makeText(mActivity, R.string.mgp_sdk_2_0_error_login_account, Toast.LENGTH_SHORT).show();
			return false;
		}else if(TextUtils.isEmpty(mPasswordStr)){
			Toast.makeText(mActivity, R.string.mgp_sdk_2_0_error_login_Password, Toast.LENGTH_SHORT).show();
			return false;
		}else if(mPasswordStr.length()<PSWD_MIN){
			Toast.makeText(mActivity, R.string.mgp_sdk_2_0_error_login_Password, Toast.LENGTH_SHORT).show();
			return false;
		}else if(!checkPass(mPasswordStr)){
			Toast.makeText(mActivity, R.string.mgp_sdk_2_0_error_login_sign, Toast.LENGTH_SHORT).show();
			return false;
		}else if(!NetWorkUtils.isNetworkConnected(mActivity)){
			Toast.makeText(mActivity, R.string.mgp_sdk_2_0_error_common_net, Toast.LENGTH_SHORT).show();
			return false;
		}
		return true;
	}
	
	private boolean checkPass(String password) {
		Pattern p = Pattern.compile("^[^\'“'\'”'\'‘'\'’'\"\\ ,，]+$");
		Matcher m = p.matcher(password);
		if (m.matches()) {
			return true;
		} else {
			return false;
		}
	}
	
	public void showDialog() {
		FragmentTransaction transaction=((FragmentActivity)mActivity).getSupportFragmentManager().beginTransaction();
		show(transaction, Contants.DialogFragmentTag.CHANGYOU_LOGIN);
	}
	
	private void changYouLogin(){
		String deviceid = SystemUtils.getDeviceId(mActivity);
		String phone = SystemUtils.getNativePhoneNumber(mActivity);
		MyHttpClient myHttpClient=new MyHttpClient(mActivity);
		if (phone == null) {
			phone = "";
		}
		Map map = new HashMap();
		map.put("device_id", deviceid);
		map.put("password", encryPassword(mPasswordStr));
		map.put("phone", phone);
		map.put("username", mAccountStr);
		myHttpClient.post(HttpContants.getURL(HttpContants.CHANGYOU_LOGIN), map, new MyAsyncResponseHandler(){
			@Override
			public void onStart() {
				mLoadingDialog.showDialog();
			}
			
			@Override
			public void onSuccess(int statusCode, String content) {
				log.d("content:"+content);
				try {
					mLoadingDialog.dismissDialog();
					if (!TextUtils.isEmpty(content)) {
						LoginInfo info=JSONUtil.getMapper().readValue(content, new TypeReference<LoginInfo>() {
						});
						final String uid = info.getUid();
						final String token = info.getToken();
						new CYMGLoginTokenVerifyUtil().loginTokenVerify(mActivity, uid, token, "c",new MyLoginTokenVerifyListener() {
							
							@Override
							public void onStart() {
								mLoadingDialog.setMessage(mActivity.getString(R.string.mgp_sdk_2_0_loading_verify));
								mLoadingDialog.showDialog();
							}
							
							@Override
							public void onSuccess() {
								mLoadingDialog.dismissDialog();
							}
							
							@Override
							public void onFailure() {
								mLoadingDialog.dismissDialog();
							}
							
							@Override
							public void onComplete() {
								Toast.makeText(mActivity, "uid:"+uid+",token:"+token, Toast.LENGTH_LONG).show();
								CYMGAccBean bean=new CYMGAccBean();
								bean.setmAcc(Contants.ACC_TYPE_CHANGYOU+mAccountStr);
								bean.setmUID(uid);
								bean.setmToken(token);
								bean.setmTimeStamp(new Date(System.currentTimeMillis()).getTime()/1000);
								((CYMGMainDialogFragmentActivity)mActivity).getmCYMGDBMaster().login(bean);
							}
						});
					}else{
						Toast.makeText(mActivity, R.string.mgp_sdk_2_0_error_common_server, Toast.LENGTH_SHORT).show();
					}
				} catch (Exception e) {
					log.e(e);
				}
			}
			
			@Override
			public void onFailure(int statusCode, Throwable error,
					String content) {
				log.d("content:"+content);
				try {
					mLoadingDialog.dismissDialog();
					if (!TextUtils.isEmpty(content)) {
						ErrorInfo info = JSONUtil.getMapper().readValue(content,new TypeReference<ErrorInfo>() {});
						if (info != null) {
							Toast.makeText(mActivity, info.getClient_message(), Toast.LENGTH_SHORT).show();
						} else {
							Toast.makeText(mActivity, R.string.mgp_sdk_2_0_error_common_server, Toast.LENGTH_SHORT).show();
						}
					} else {
						Toast.makeText(mActivity, R.string.mgp_sdk_2_0_error_common_server, Toast.LENGTH_SHORT).show();
					}
				} catch (Exception e) {
					log.e(e);
				}
			}
		});
	}
	
	private String encryPassword(String password) {
		String result = null;
		try {
			result = new DesUtil().encrypt(password);
		} catch (Exception e) {
			log.e(e);
		}
		return result;
	}
	
}
