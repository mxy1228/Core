package com.changyou.mgp.sdk.mbi.pay.weixin;

import java.util.LinkedList;
import java.util.List;
import java.util.Random;


import org.apache.http.NameValuePair;
import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONObject;

import android.app.ProgressDialog;
import android.content.Context;
import android.os.AsyncTask;

import com.changyou.mgp.sdk.mbi.config.CYMGPrompt;
import com.changyou.mgp.sdk.mbi.config.HttpContants;
import com.changyou.mgp.sdk.mbi.entity.GoodsItem;
import com.changyou.mgp.sdk.mbi.log.CYLog;
import com.changyou.mgp.sdk.mbi.platform.CYMGPayHelper;
import com.tencent.mm.sdk.constants.Build;
import com.tencent.mm.sdk.modelpay.PayReq;
import com.tencent.mm.sdk.openapi.IWXAPI;

/***
 * 
 * <PRE>
 * 作用
 *       微信支付业务逻辑
 * 限制
 *       无。
 * 注意事项
 *       无。
 * </PRE>
 */
public class WeixinPayModel{


	private IWXAPI api;
	
	private static CYLog log = CYLog.getInstance();
	
	/**
	 * 微信公众平台商户模块和商户约定的密钥
	 * 
	 * 注意：不能hardcode在客户端，建议genPackage这个过程由服务器端完成
	 */
	static final String PARTNER_KEY ="de4a18492b61d7da989e975ea2c872fa";
	

    /** 商家向财付通申请的商家id */
    public static final String PARTNER_ID ="1219702201";
    
    
	//=====================================以下cp自己传入
	/**
     * 微信开放平台和商户约定的支付密钥
     * 
     * 注意：不能hardcode在客户端，建议genSign这个过程由服务器端完成
     */
	static String APP_KEY=null ;

	// APP_ID 替换为你的应用从官方网站申请到的合法appId
	public static String APP_ID =null;

	 /**
     * 微信开放平台和商户约定的密钥
     * 
     * 注意：不能hardcode在客户端，建议genSign这个过程由服务器端完成
     */
	private static String APP_SECRET =null;
	
	private Context mContext=null;
	private GoodsItem mGoodsItem=null;
	
	public WeixinPayModel(Context cxt,IWXAPI mApi) {
		try{
			mContext=cxt;
			
			//以下三个参数需要让游戏从androidfest.xml里配置
			APP_ID=MetaDataValueUtils.getWeixinAppId(mContext);
			APP_KEY=MetaDataValueUtils.getWeixinAppKey(mContext);
			APP_SECRET=MetaDataValueUtils.getWeixinAppSecret(mContext);
			
			api=mApi;
			api.registerApp(APP_ID);
		}catch(Exception e){
			log.e(e);
			this.CallWeixinPayException();
		}
	}
	
	/***
	 * 开始支付
	 * @param mGoodsItem 
	 */
	public void startPay(final String uid,final GoodsItem goodsItem,final String orderID){
		this.mGoodsItem=goodsItem;
		//调用我们的token请求
		try {
			
			//缓存起来
			PayGood.store(uid, goodsItem, orderID);
			
			RequestToken.getToken(mContext, new RequestToken.WeixinTokenListener(){

				@Override
				public void handleToken(String token) {
					GetPrepayIdTask getPrepayId = new GetPrepayIdTask(token);
					getPrepayId.execute();
					
			}});
		} catch (WeixinPayException e) {
			this.CallWeixinPayException();
		}
		

	}
	
	
	/***
	 * 检测微信客户端,是否支持微信支付
	 * @return
	 */
	public boolean isPaySupport(){
		boolean isPaySupported=false; 
		try{
			isPaySupported = api.getWXAppSupportAPI() >= Build.PAY_SUPPORTED_SDK_INT;
		
			return isPaySupported;
		}catch(Exception e){
			log.e(e);
			CallWeixinPayException();
		}
		return isPaySupported ;
	}

	

	
	
	private void CallWeixinPayException(){
		CYMGPayHelper.getInstance().payException(CYMGPrompt.CODE_PAY_FAILED);
	}
	
	private class GetPrepayIdTask extends AsyncTask<Void, Void, GetPrepayIdResult> {

		private ProgressDialog dialog;
		private String accessToken;
		private WeixinPayDo paydo;
		
		public GetPrepayIdTask(String accessToken) {
			this.accessToken = accessToken;
			
			paydo=new WeixinPayDo();
		}
		
		@Override
		protected void onPreExecute() {

		}

		@Override
		protected void onPostExecute(GetPrepayIdResult result) {
			if (dialog != null) {
				dialog.dismiss();
			}
			
			if (result.localRetCode == LocalRetCode.ERR_OK) {
				paydo.sendPayReq(api,result);
			} else {
				log.e("get_prepayid_fail:"+result.localRetCode);
				CallWeixinPayException();
			}
		}

		@Override
		protected void onCancelled() {
			super.onCancelled();
		}

		@Override
		protected GetPrepayIdResult doInBackground(Void... params){
			try{
				String url = String.format("https://api.weixin.qq.com/pay/genprepay?access_token=%s", accessToken);
				String entity = paydo.genProductArgs(mGoodsItem);
				
				log.d( "doInBackground, url = " + url);
				log.d( "doInBackground, entity = " + entity);
				
				GetPrepayIdResult result = new GetPrepayIdResult();
				
				byte[] buf = Util.httpPost(url, entity);
				if (buf == null || buf.length == 0) {
					result.localRetCode = LocalRetCode.ERR_HTTP;
					return result;
				}
				
				String content = new String(buf);
				log.d("doInBackground, content = " + content);
				result.parseFrom(content);
				return result;
			}catch(  WeixinPayException e){
				CallWeixinPayException();
			}
			return null;
		}
	}

	private  enum LocalRetCode {
		ERR_OK, ERR_HTTP, ERR_JSON, ERR_OTHER
	}
	
		
	public static class GetPrepayIdResult {
		
	
		public LocalRetCode localRetCode = LocalRetCode.ERR_OTHER;
		public String prepayId;
		public int errCode;
		public String errMsg;
		
		public void parseFrom(String content)throws WeixinPayException {
			
			if (content == null || content.length() <= 0) {
				log.e("parseFrom fail, content is null");
				localRetCode = LocalRetCode.ERR_JSON;
				return;
			}
			
			try {
				JSONObject json = new JSONObject(content);
				if (json.has("prepayid")) { // success case
					prepayId = json.getString("prepayid");
					localRetCode = LocalRetCode.ERR_OK;
				} else {
					localRetCode = LocalRetCode.ERR_JSON;
				}
				
				errCode = json.getInt("errcode");
				errMsg = json.getString("errmsg");
				
			} catch (Exception e) {
				localRetCode = LocalRetCode.ERR_JSON;
				throw new WeixinPayException(errMsg);
			}
		}
	}
	

	
	
	

	

}
