package com.changyou.mgp.sdk.mbi.channel.impl;

import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.text.TextUtils;

import com.changyou.mgp.sdk.mbi.channel.CYMGChannel;
import com.changyou.mgp.sdk.mbi.channel.CYMGChannelEntity;
import com.changyou.mgp.sdk.mbi.config.CYMGPrompt;
import com.changyou.mgp.sdk.mbi.config.CYMGProtocolConfig;
import com.changyou.mgp.sdk.mbi.config.CYMGProtocolKeys;
import com.changyou.mgp.sdk.mbi.config.Params;
import com.changyou.mgp.sdk.mbi.config.SDKConfig;
import com.changyou.mgp.sdk.mbi.entity.GoodsItem;
import com.changyou.mgp.sdk.mbi.log.CYLog;
import com.changyou.mgp.sdk.mbi.platform.CYMGInitHelper;
import com.changyou.mgp.sdk.mbi.platform.CYMGLoginHelper;
import com.changyou.mgp.sdk.mbi.platform.CYMGLoginOutHelpr;
import com.changyou.mgp.sdk.mbi.platform.CYMGPayHelper;
import com.changyou.mgp.sdk.mbi.platform.CYMGPlatformConfiguration;
import com.changyou.mgp.sdk.mbi.utils.MetaDataValueUtils;
import com.changyou.mgp.sdk.mbi.utils.SwitchInfoSPUtil;
import com.nearme.gamecenter.open.api.ApiCallback;
import com.nearme.gamecenter.open.api.FixedPayInfo;
import com.nearme.gamecenter.open.api.GameCenterSDK;
import com.nearme.gamecenter.open.api.GameCenterSettings;
import com.nearme.oauth.model.UserInfo;

public class CYMGOppoImpl implements CYMGChannel {
	
	private final CYLog log = CYLog.getInstance();
	
	private static final int MIN_PRICE = 1;
	public static final String PAY_NOTIFY_URL =SDKConfig.DEBUG ? 
			"http://t.changyou.com/service/sdkOppoPaylist"
			:"http://servicebilling.changyou.com/service/sdkOppoPaylist";

	@Override
	public void init(CYMGPlatformConfiguration config) {
		log.d("------MGPOppoImpl:init");
		Context context = config.getmContext();
		String app_key=MetaDataValueUtils.getOppoAppKey(context);
		String app_secret=MetaDataValueUtils.getOppoAppSecret(context);
		GameCenterSettings gameCenterSettings = new GameCenterSettings(
				app_key, app_secret) {

			@Override
			public void onForceReLogin() {
				// sdk由于某些原因登出,此方法通知cp,cp需要在此处清理当前的登录状态并重新请求登录.
				// 可以发广播通知页面重新登录
			}
			
			@Override 
			public void onForceUpgradeCancel() {
				// 游戏自升级，后台有设置为强制升级，用户点击取消时的回调函数。
				// 若开启强制升级模式 ，  一般要求不更新则强制退出游戏并杀掉进程。
				// System.exit(0) or kill this process
			}
		};
//		AccountAgent.useNewApi = true;
		if(SDKConfig.DEBUG){
			log.d("-----MGPOppoImpl:DebugMode");
			GameCenterSettings.isDebugModel = true;// 测试log开关
		}
		if(SwitchInfoSPUtil.getLandScape(context)==CYMGProtocolConfig.PORTRAIT){
			GameCenterSettings.isOritationPort = true;// 控制SDK activity的横竖屏 true为竖屏
		}else{
			GameCenterSettings.isOritationPort = false;// 控制SDK activity的横竖屏 false为横屏
		}
		GameCenterSDK.init(gameCenterSettings, context);
		CYMGInitHelper.getInstance().onInitResult(CYMGPrompt.CODE_INIT_SUCCESS, null);
		GameCenterSDK.getInstance().doShowSprite((Activity)context);
	}

	@Override
	public void doLogin(CYMGChannelEntity entity) {
		log.d("------MGPOppoImpl:doLogin");
		final Context context = entity.getmContext();
		GameCenterSDK.getInstance().doLogin(new ApiCallback() {

			@Override
			public void onSuccess(String content, int code) {
				GameCenterSDK.getInstance().doGetUserInfo(new ApiCallback() {

					@Override
					public void onSuccess(String content, int code) {
						try {
							final UserInfo userInfo = new UserInfo(content);
							String uid=userInfo.id;
							String token=GameCenterSDK.getInstance().doGetAccessToken();
							String oauth_token = "";
							String oauth_token_secret = "";
							if(!TextUtils.isEmpty(token)&&token.contains("&")){
								String[] token_ss=token.split("&");
								if(token_ss.length>1){
									oauth_token=token_ss[0].split("=")[1];
									oauth_token_secret=token_ss[1].split("=")[1];
								}
							}
							Bundle b = new Bundle();
							b.putString(CYMGProtocolKeys.UID, uid);
							b.putString(CYMGProtocolKeys.TOKEN,oauth_token);
							b.putString(CYMGProtocolKeys.TOKEN_SECRET, oauth_token_secret);
							CYMGLoginHelper.getInstance().loginResult(CYMGPrompt.CODE_LOGIN_SUCCESS,b);
						} catch (Exception e) {
							log.e(e);
						}
					}

					@Override
					public void onFailure(String content, int code) {
						CYMGLoginHelper.getInstance().loginResult(CYMGPrompt.CODE_LOGIN_FAILED, null);
					}
				}, (Activity)context);
			}

			@Override
			public void onFailure(String content, int code) {
				CYMGLoginHelper.getInstance().loginResult(CYMGPrompt.CODE_LOGIN_FAILED, null);
			}
			
		}, (Activity)context);
	}

	@Override
	public void doPay(CYMGChannelEntity entity) {
		log.d("------MGPOppoImpl:doPay");
		Context context = entity.getmContext();
		Bundle bundle=entity.getBundle();
		final GoodsItem goodsItem = (GoodsItem)bundle.getSerializable(Params.GOODSITEM);
		final String uid = bundle.getString(Params.UID);
		final String currentOrderID = bundle.getString(Params.ORDER_ID);
		if (goodsItem == null) {
			log.e("mGoodsItem is null");
			return;
		}
		if(uid == null){
			log.e("uid is null");
			return;
		}
		if(currentOrderID == null){
			log.e("order_id is null");
			return;
		}
		double d=Double.valueOf(goodsItem.getGoods_price());
		int price=(int)(d*100);
		if(price < MIN_PRICE){
			log.e("price < "+MIN_PRICE);
			return;
		}
		FixedPayInfo payInfo = new FixedPayInfo(currentOrderID, "changyou", price);
		payInfo.setProductDesc(goodsItem.getGoods_describe());
		payInfo.setProductName(goodsItem.getGoods_name());
		payInfo.setCallbackUrl(PAY_NOTIFY_URL);
		payInfo.setGoodsCount(Integer.valueOf(goodsItem.getGoods_number()));
		GameCenterSDK.getInstance().doFixedKebiPayment(new ApiCallback(){

			@Override
			public void onSuccess(String content, int code) {
				CYMGPayHelper.getInstance().paySuccess(uid,goodsItem, currentOrderID);
			}

			@Override
			public void onFailure(String content, int code) {
				CYMGPayHelper.getInstance().payException(CYMGPrompt.CODE_PAY_FAILED);
			}
			
		}, payInfo,(Activity)context);
	}

	@Override
	public void doLogout(CYMGChannelEntity entity) {
		log.d("------MGPOppoImpl:doLogout");
		CYMGLoginOutHelpr.getInstance().logoutResult(CYMGPrompt.CODE_LOGOUT_SUCCESS);
	}

	@Override
	public void doDestroy(CYMGChannelEntity entity) {
		log.d("------MGPOppoImpl:doDestroy");
		Context context = entity.getmContext();
		GameCenterSDK.getInstance().doDismissSprite((Activity)context);
	}

	@Override
	public void doCustomerService(CYMGChannelEntity entity) {
		// TODO Auto-generated method stub

	}

}
