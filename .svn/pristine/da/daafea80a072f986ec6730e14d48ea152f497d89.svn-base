package com.changyou.mgp.sdk.mbi.account.ui;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.Configuration;
import android.net.Uri;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.inputmethod.EditorInfo;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.TextView.OnEditorActionListener;

import com.changyou.mgp.sdk.mbi.account.id.AccResource;
import com.changyou.mgp.sdk.mbi.config.Contants;
import com.changyou.mgp.sdk.mbi.config.HttpContants;
import com.changyou.mgp.sdk.mbi.log.CYLog;
import com.changyou.mgp.sdk.mbi.mbi.manager.CMBILogManager;
import com.changyou.mgp.sdk.mbi.ui.base.BaseFragment;
import com.changyou.mgp.sdk.mbi.ui.widget.WaitingDialog;
import com.changyou.mgp.sdk.mbi.utils.DesUtil;
import com.changyou.mgp.sdk.mbi.utils.MyToast;
import com.changyou.mgp.sdk.mbi.utils.NetWorkUtils;
import com.changyou.mgp.sdk.mbi.utils.SystemUtils;
import com.changyou.mgp.sdk.mbi.utils.UserInfoSPUtil;

/**
 * 
 * 功能描述：登陆界面Fragment
 * 
 * @author 严峥(yanzheng)
 * @date 2014-1-20 上午10:24:23 修改历史：(修改人，修改时间，修改原因/内容)
 */
public class CYMGLoginChengyouFragment extends BaseFragment implements OnClickListener,
		OnEditorActionListener {

	private CYLog log = CYLog.getInstance();
	
	public static final int RESULT_CODE_REGIST = 1;

	private Activity mActivity;

	private ImageView mCloseBtn;
	private Button mLoginBtn, mOneKeyRegisterBtn;
	private AutoCompleteTextView mAccountEt;
	private EditText mPasswordEt;
	private TextView mForgetPasswordTv;
	private TextView mChangeTv;
	private WaitingDialog mWaitingDialog;
	private AlertDialog.Builder mAlertDialog;

	private String mUsername_lower = null;
	private String mUsername = null;
	private String mPassword = null;

	@Override
	public void onAttach(Activity activity) {
		super.onAttach(activity);
		log.d("onAttach");
		this.mActivity = activity;
	}
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		log.d("onCreate");
	}

	@Override
	public void onResume() {
		super.onResume();
		log.d("onResume");
		String u=((CYMGLoginActivity)mActivity).getUsername();
		if(!TextUtils.isEmpty(u)){
			mAccountEt.setText(u);
		}
		CMBILogManager.page_A_Login(mActivity);
	}
	
	@Override
	public void onPause() {
		super.onPause();
		log.d("onPause");
		SystemUtils.dissmisSoftInput((Activity)mActivity);
	}
	
	@Override
	public void onStop() {
		super.onStop();
		mUsername=mAccountEt.getText().toString();
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		if (Contants.LoginParams.TYPE_CYOU.equals(UserInfoSPUtil
				.getType(mActivity))) {
			if (this.mAlertDialog != null) {
				this.mAlertDialog = null;
			}
			WaitingDialog.DestroyWaitingDialog(mWaitingDialog);
		}
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		log.d("onCreateView");
		View view = inflater.inflate(AccResource.getInstance(mActivity).mgp_login_chengyou_109,
				container, false);
		initView(view);
		initDialog();
		initData();
		initEvent();
		return view;
	}

	@Override
	public void onConfigurationChanged(Configuration newConfig) {
		super.onConfigurationChanged(newConfig);
		log.d("onConfigurationChanged");
		ViewGroup parentView = (ViewGroup) getView();
		parentView.removeAllViews();
		LayoutInflater inflater = (LayoutInflater) mActivity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		View view = inflater.inflate(AccResource.getInstance(mActivity).mgp_login_chengyou_109, parentView, false);
		initView(view);
		parentView.addView(view);
		initData();
		initEvent();
		initDialog();
	}


	/**
	 * 
	 * 功能描述：初始化控件
	 * 
	 * @author 严峥(yanzheng)
	 * @param @param view
	 * @return void
	 * @date 2014-3-25 上午9:53:04
	 * 
	 *       修改历史 ：(修改人，修改时间，修改原因/内容)
	 */
	private void initView(View view) {
		this.mAccountEt = (AutoCompleteTextView) view.findViewById(AccResource.getInstance(mActivity).mgp_chengyou_login_et_account);
		this.mPasswordEt = (EditText) view.findViewById(AccResource.getInstance(mActivity).mgp_chengyou_login_et_password);
		this.mForgetPasswordTv = (TextView) view.findViewById(AccResource.getInstance(mActivity).mgp_chengyou_tv_forget);
		this.mOneKeyRegisterBtn = (Button) view.findViewById(AccResource.getInstance(mActivity).mgp_chengyou_btn_oneKeyRegister);
		this.mLoginBtn = (Button) view.findViewById(AccResource.getInstance(mActivity).mgp_chengyou_btn_login);
		this.mChangeTv = (TextView) view.findViewById(AccResource.getInstance(mActivity).mgp_chengyou_tv_change);
		this.mCloseBtn = (ImageView) view.findViewById(AccResource.getInstance(mActivity).mgp_chengyou_img_close);
	}

	/**
	 * 
	 * 功能描述：初始化dialog
	 * 
	 * @author 严峥(yanzheng)
	 * @param
	 * @return void
	 * @date 2014-3-25 上午9:53:15
	 * 
	 *       修改历史 ：(修改人，修改时间，修改原因/内容)
	 */
	private void initDialog() {
		this.mWaitingDialog = new WaitingDialog(mActivity);
		this.mWaitingDialog.setMessage(mActivity.getString(AccResource.getInstance(mActivity).mgp_loading));
		this.mAlertDialog = new AlertDialog.Builder(mActivity);
		this.mAlertDialog.setTitle(mActivity.getString(AccResource.getInstance(mActivity).mgp_login_dialog_title));
		this.mAlertDialog.setPositiveButton(mActivity.getString(AccResource.getInstance(mActivity).mgp_login_dialog_retry),
				new DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog, int which) {
						
					}
				});
		this.mAlertDialog.setNegativeButton(mActivity.getString(AccResource.getInstance(mActivity).mgp_login_dialog_cancel),
				new DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog, int which) {

					}
				});
	}

	@Override
	protected void initData() {
		String username = UserInfoSPUtil.getUsername(mActivity);
		if (!TextUtils.isEmpty(username)) {
			this.mAccountEt.setText(username);
		}
		if(!TextUtils.isEmpty(mUsername)){
			mAccountEt.setText(mUsername);
		}
	}

	@Override
	protected void initEvent() {
		this.mCloseBtn.setOnClickListener(this);
		this.mLoginBtn.setOnClickListener(this);
		this.mOneKeyRegisterBtn.setOnClickListener(this);
		this.mForgetPasswordTv.setOnClickListener(this);
		this.mChangeTv.setOnClickListener(this);
		this.mAccountEt.setOnEditorActionListener(this);
		this.mPasswordEt.setOnEditorActionListener(this);
	}

	@Override
	public void onClick(View v) {
		Intent intent = null;
		if (v.getId() == AccResource.getInstance(mActivity).mgp_chengyou_img_close) {
			((Activity) mActivity).finish();
		} else if (v.getId() == AccResource.getInstance(mActivity).mgp_chengyou_btn_login) {
			
		} else if (v.getId() == AccResource.getInstance(mActivity).mgp_chengyou_btn_oneKeyRegister) {
			intent = new Intent(mActivity, CYMGRegistActivity.class);
			startActivityForResult(intent, RESULT_CODE_REGIST);
		} else if (v.getId() == AccResource.getInstance(mActivity).mgp_chengyou_tv_forget) {
			intent = new Intent();
			intent.setAction("android.intent.action.VIEW");
			Uri content_url = Uri.parse(HttpContants.FORGET_PASSWORD);
			intent.setData(content_url);
			startActivity(intent);
		} else if (v.getId() == AccResource.getInstance(mActivity).mgp_chengyou_tv_change) {
			((CYMGLoginActivity)mActivity).changeToChangyouFragment();
		} 
	}

	@Override
	public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
		switch (actionId) {
		case EditorInfo.IME_ACTION_NEXT:
			mPasswordEt.requestFocus();
			break;
		case EditorInfo.IME_ACTION_GO:
			break;
		}
		return true;
	}

	/**
	 * 
	 * 功能描述：显示登录按钮弹出的dialog
	 * 
	 * @author 严峥(yanzheng)
	 * @param @param error_code
	 * @return void
	 * @date 2014-3-7 下午7:34:42
	 * 
	 *       修改历史 ：(修改人，修改时间，修改原因/内容)
	 */
	private void showLoginDialog(String msg) {
		if (TextUtils.isEmpty(msg)) {
			mAlertDialog.setMessage(mActivity.getString(AccResource.getInstance(mActivity).mgp_net_error_hint));
			mAlertDialog.show();
		} else {
			MyToast.showToast(mActivity, msg);
		}
	}

	private boolean checkET() {
		this.mUsername = mAccountEt.getText().toString().trim();
		this.mUsername_lower = mUsername.toLowerCase();
		this.mPassword = mPasswordEt.getText().toString().trim();
		if (mUsername.length() == 0) {
			MyToast.showToast(mActivity, mActivity.getString(AccResource.getInstance(mActivity).mgp_login_toast_account_error));
			return false;
		}
		if (TextUtils.isEmpty(mPassword)) {
			MyToast.showToast(mActivity, mActivity.getString(AccResource.getInstance(mActivity).mgp_login_toast_password_error));
			return false;
		}
		if (mPassword.length() < 4) {
			MyToast.showToast(mActivity, mActivity.getString(AccResource.getInstance(mActivity).mgp_regist_password_error));
			return false;
		} else {
			if (!checkPass(mPassword)) {
				MyToast.showToast(mActivity, mActivity.getString(AccResource.getInstance(mActivity).mgp_regist_password_not_valide));
				return false;
			}
		}
		if(!NetWorkUtils.isNetworkConnected(mActivity)){
			MyToast.showToast(mActivity, mActivity.getString(AccResource.getInstance(mActivity).mgp_net_error_hint));
			return false;
		}
		return true;
	}

	/**
	 * 
	 * 功能描述：检测密码合法性
	 * 
	 * @author 严峥(yanzheng)
	 * @param @param password
	 * @param @return
	 * @return boolean
	 * @date 2014-3-15 下午2:30:50
	 * 
	 *       修改历史 ：(修改人，修改时间，修改原因/内容)
	 */
	private boolean checkPass(String password) {
		Pattern p = Pattern.compile("^[^\'“'\'”'\'‘'\'’'\"\\ ,，]+$");
		Matcher m = p.matcher(password);
		if (m.matches()) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * 
	 * 功能描述：加密明文密码
	 * 
	 * @author 严峥(yanzheng)
	 * @param @param password
	 * @param @return
	 * @return String
	 * @date 2014-3-4 下午7:24:31
	 * 
	 *       修改历史 ：(修改人，修改时间，修改原因/内容)
	 */
	private String desPassword(String password) {
		String result = null;
		try {
			result = new DesUtil().encrypt(password);
		} catch (Exception e) {
			log.e(e);
		}
		return result;
	}
}
