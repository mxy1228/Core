package com.changyou.mgp.sdk.mbi.pay.ui;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import org.apache.http.Header;
import org.codehaus.jackson.type.TypeReference;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.text.TextUtils;

import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.changyou.mgp.sdk.mbi.account.id.AccResource;
import com.changyou.mgp.sdk.mbi.config.CYMGProtocolConfig;
import com.changyou.mgp.sdk.mbi.config.CYMGProtocolKeys;
import com.changyou.mgp.sdk.mbi.config.Contants;
import com.changyou.mgp.sdk.mbi.config.HttpContants;
import com.changyou.mgp.sdk.mbi.config.Params;
import com.changyou.mgp.sdk.mbi.config.SDKConfig;
import com.changyou.mgp.sdk.mbi.entity.GoodsItem;
import com.changyou.mgp.sdk.mbi.entity.MDOEntity;
import com.changyou.mgp.sdk.mbi.http.MyAsyncResponseHandler;
import com.changyou.mgp.sdk.mbi.http.MyHttpClient;
import com.changyou.mgp.sdk.mbi.log.CYLog;
import com.changyou.mgp.sdk.mbi.mbi.manager.CMBILogManager;
import com.changyou.mgp.sdk.mbi.pay.adapter.PaymentAdapter;
import com.changyou.mgp.sdk.mbi.pay.alipay.MGPAlipay;
import com.changyou.mgp.sdk.mbi.pay.id.PayResource;
import com.changyou.mgp.sdk.mbi.pay.weixin.WeixinPayModel;
import com.changyou.mgp.sdk.mbi.ui.base.BaseFragment;
import com.changyou.mgp.sdk.mbi.ui.widget.WaitingDialog;
import com.changyou.mgp.sdk.mbi.ui.widget.WaitingDialog.MyDialogDismissListener;
import com.changyou.mgp.sdk.mbi.utils.JSONUtil;
import com.changyou.mgp.sdk.mbi.utils.MetaDataValueUtils;
import com.changyou.mgp.sdk.mbi.utils.MyToast;
import com.changyou.mgp.sdk.mbi.utils.NetWorkUtils;
import com.changyou.mgp.sdk.mbi.utils.UserInfoSPUtil;
import com.loopj.android.http.RequestParams;
import com.tencent.mm.sdk.openapi.IWXAPI;
import com.tencent.mm.sdk.openapi.WXAPIFactory;
import com.unionpay.UPPayAssistEx;
import com.unionpay.uppay.PayActivity;
/**
 * 
 * 功能描述：支付方式页�?
 *
 * @author 徐萌�?xumengyang)
 *
 * @date 2014-1-15
 */
public class CYMGPaymentWayFragment extends BaseFragment implements OnItemClickListener,OnClickListener{

	private CYLog log = CYLog.getInstance();
	
	public static final int MOD_PRICE = 2;
	public static final int RESULT_FOR_ALIPAY_CODE = 3;//支付宝极简收银台回调code
	public static final int RESULT_FOR_MO9_CODE = 100;//MO9回调code
	
	private Activity mActivity;
	private GoodsItem mGoodsItem;
	private String mUID;
	private WaitingDialog mWaitingDialog;
	private String mCurrentOrderID;//本次生成的订单号
	private PaymentAdapter mAdapter;
	
	private ListView mListView;
	private ImageButton mServiceImgBtn;
	private Button mRightBtn;
	private TextView mTitleTv;
	private ImageButton mBackIBtn;
	private View mTitle;
	
	private MyHttpClient mHttpClient;
	private PayResource mPayResource;
	private Bundle mBundle;
	private OnOrderIDCreatedCallBack mOrderCallBack;
	
	private boolean isDestroy = false;

	boolean isMBO=false;
	boolean hasWeixinPay=false;
	private boolean mCreating;
	
	 
	
	@Override
	public void onAttach(Activity activity) {
		super.onAttach(activity);
		this.mActivity = activity;
		this.mOrderCallBack = (OnOrderIDCreatedCallBack)activity;
	}
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View view = inflater.inflate(PayResource.getInstance(mActivity).mgp_payment_way, container,false);
		initView(view);
		initTitle(view);
		initWaitingDialog();
		initData();
		initEvent();
		return view;
	}
	
	@Override
	public void onResume() {
		super.onResume();
		CMBILogManager.page_B_Payway1(mActivity);
	}
	
	private void initView(View view){
		this.mListView = (ListView)view.findViewById(PayResource.getInstance(mActivity).mgp_payment_lv);
	}
	
	private void initTitle(View view){
		this.mTitle = view.findViewById(PayResource.getInstance(mActivity).payment_title);
		this.mBackIBtn = (ImageButton)mTitle.findViewById(PayResource.getInstance(mActivity).mgp_title_left_ibtn);
		this.mServiceImgBtn = (ImageButton)mTitle.findViewById(PayResource.getInstance(mActivity).mgp_title_right_imgbtn);
		this.mTitleTv = (TextView)mTitle.findViewById(PayResource.getInstance(mActivity).mgp_title_tv);
		this.mRightBtn = (Button)mTitle.findViewById(PayResource.getInstance(mActivity).mgp_title_right_btn);
		this.mRightBtn.setVisibility(View.GONE);
		this.mServiceImgBtn.setVisibility(View.GONE);
	}
	
	private void initWaitingDialog(){
		this.mWaitingDialog = new WaitingDialog(mActivity);
		this.mWaitingDialog.setMessage(mActivity.getString(PayResource.getInstance(mActivity).mgp_loading));
	}
	
	@Override
	public void onDestroy() {
		this.isDestroy=true;
		super.onDestroy();
		WaitingDialog.DestroyWaitingDialog(mWaitingDialog);
	}
	
	@Override
	protected void initData() {
		mBundle = getArguments();
		int opentype = mBundle.getInt(CYMGProtocolKeys.PAYMENT_METHOD);
		if(opentype == CYMGProtocolConfig.PAY_WAY){
			//如果直接打开支付方式页，需首先弹出dialog创建订单
			String goods_id = mBundle.getString(CYMGProtocolKeys.GOODS_ID);
			String goods_register_id = mBundle.getString(CYMGProtocolKeys.GOODS_REGIST_ID);
			String goods_number = mBundle.getString(CYMGProtocolKeys.GOODS_NUMBER);
			String goods_price = mBundle.getString(CYMGProtocolKeys.GOODS_PRICE);
			String goods_name = mBundle.getString(CYMGProtocolKeys.GOODS_NAME); 
			this.mGoodsItem = new GoodsItem();
			this.mGoodsItem.setGoods_id(goods_id);
			this.mGoodsItem.setGoods_register_id(goods_register_id);
			this.mGoodsItem.setGoods_number(goods_number);
			this.mGoodsItem.setGoods_price(Double.valueOf(goods_price));
			this.mGoodsItem.setGoods_name(goods_name);
			createOrderFromServer(mGoodsItem);
		}else{
			this.mGoodsItem = (GoodsItem)mBundle.getSerializable(Params.GOODSITEM);
			this.mCurrentOrderID = mBundle.getString(Params.ORDER_ID);
			if(this.mCurrentOrderID == null){
				throw new IllegalAccessError("order_id is null");
			}
		}
		
		this.mUID = mBundle.getString(Params.UID);
		if (this.mGoodsItem == null) {
			log.e("mGoodsItem is null");
			return;
		}
		if(this.mUID == null){
			throw new IllegalAccessError("uid is null");
		}
		String[] ways = null;
		
		if(Double.valueOf(mGoodsItem.getGoods_price()) == MOD_PRICE){
			ways = getResources().getStringArray(PayResource.getInstance(mActivity).mgp_payment_way_with_mdo);
			isMBO=true;
		}else{
			ways = getResources().getStringArray(PayResource.getInstance(mActivity).mgp_payment_way_without_mdo);
			isMBO=false;
		}
		
		this.mPayResource=PayResource.getInstance(mActivity);
		ArrayList<Integer> imgArr=new ArrayList<Integer>();
		

		if(!isMBO){
			imgArr.add(mPayResource.mgp_payment_way_alipay);
			imgArr.add(mPayResource.mgp_payment_way_alipay);
			
			//初始化微信支付
			WeixinPayModel weixinPay=WeixinPayModel.getInstance();
			weixinPay.setActivity(this.getActivity());
			boolean isPaySupported =false;//weixinPay.isPaySupport();;
			//装有微信客户端并且版本号不符合要求的都不显示微信支付方式
			if(isPaySupported){
				log.d( "客户端支持微信支付");
				imgArr.add(mPayResource.mgp_payment_way_weixinpay);
				hasWeixinPay=true;
			}else{
				String[] ways_cp = new String[5];
				System.arraycopy(ways, 0, ways_cp, 0, 2);
				log.d("--ways_cp:"+ways_cp);
				System.arraycopy(ways, 3, ways_cp, 2, 3);
				log.d("--ways_cp:"+ways_cp);
				ways=ways_cp;
				log.w("客户端不支持微信支付");
			}
			imgArr.add(mPayResource.mgp_payment_way_uppay);
			imgArr.add(mPayResource.mgp_payment_way_cft);
			imgArr.add(mPayResource.mgp_payment_way_mo9);
		}else{
			imgArr.add(mPayResource.mgp_payment_way_mdo);
			imgArr.add(mPayResource.mgp_payment_way_alipay);
			imgArr.add(mPayResource.mgp_payment_way_alipay);
			imgArr.add(mPayResource.mgp_payment_way_uppay);
			imgArr.add(mPayResource.mgp_payment_way_cft);
			imgArr.add(mPayResource.mgp_payment_way_mo9);
		}
		
		//若有两元商品则显示手机短信支�?
		mAdapter = new PaymentAdapter(mActivity, ways,imgArr);
		mListView.setAdapter(mAdapter);
		this.mTitleTv.setText(PayResource.getInstance(mActivity).mgp_title_tv_payment_way);
		this.mServiceImgBtn.setVisibility(View.GONE);
	}

	@Override
	protected void initEvent() {
		this.mListView.setOnItemClickListener(this);
		this.mBackIBtn.setOnClickListener(this);
	}
	
	
	private void doAlipayWap(){
		if(NetWorkUtils.isNetworkConnected(mActivity)){
			CMBILogManager.action_B_Payway1_AlipayWap(mActivity);
			CYMGAlipayWrapFragment f = new CYMGAlipayWrapFragment();
			Bundle b = new Bundle();
			b.putSerializable(Params.GOODSITEM, mGoodsItem);
			b.putString(Params.ALIPAY_WRAP.TRADE_NO, mCurrentOrderID);
			b.putString(Params.ALIPAY_WRAP.UID, mUID);
			f.setArguments(b);
			getFragmentManager().beginTransaction().replace(PayResource.getInstance(mActivity).payment_root_layout, f, Contants.FragmentTag.ALIPAY_WRAP_FRAGMENT)
			.addToBackStack(Contants.FragmentTag.ALIPAY_WRAP_FRAGMENT).commit();
		}else{
			showNetErrorToast();
		}
		
	}
	
	private void doNoMdoMGPAliapy(){
		CMBILogManager.action_B_Payway1_AlipaySY(mActivity);
		doAlipay();
	}
	
	
	private void doNoMdoUPPay(){
		CMBILogManager.action_B_Payway1_UPPay(mActivity);
		UPPay();
	}
	
	private void doTenPay(){
		if(NetWorkUtils.isNetworkConnected(mActivity)){
			CMBILogManager.action_B_Payway1_CFTPay(mActivity);
			CYMGTenPayFragment tenpayF = new CYMGTenPayFragment();
			Bundle tenpayB = new Bundle();
			tenpayB.putSerializable(Params.GOODSITEM, mGoodsItem);
			tenpayB.putString(Params.ALIPAY_WRAP.TRADE_NO, mCurrentOrderID);
			tenpayB.putString(Params.ALIPAY_WRAP.UID, mUID);
			tenpayF.setArguments(tenpayB);
			getFragmentManager().beginTransaction().replace(PayResource.getInstance(mActivity).payment_root_layout, tenpayF, Contants.FragmentTag.ALIPAY_WRAP_FRAGMENT)
			.addToBackStack(Contants.FragmentTag.ALIPAY_WRAP_FRAGMENT).commit();
		}else{
			showNetErrorToast();
		}
	}
	
	
	private void doNoMO9Pay(){
		CMBILogManager.action_B_Payway1_MO9(mActivity);
		MO9();
	}
	
	private void doAlipay(){
		if(NetWorkUtils.isNetworkConnected(mActivity)){
			new MGPAlipay(mActivity).pay(mUID,mGoodsItem,mCurrentOrderID);
		}else{
			showNetErrorToast();
		}
		
	}
	
	/***
	 * 处理不是MDO的支付方式
	 * @param position
	 */
	private void doNoMDOClick(int position){
<<<<<<< .working
=======
		//判断是否有微信支付
		if(hasWeixinPay){
			switch (position) {
			case 0:
				doAlipayWap();
				break;
			case 1:
				doNoMdoMGPAliapy();
				break;
			case 2:
				doNoMdoWeixinPay();
				break;
			case 3:
				doNoMdoUPPay();
				break;
			case 4:
				doTenPay();
				break;
			case 5:
				doNoMO9Pay();
				break;
			}

>>>>>>> .merge-right.r6453
		}else{
			switch (position) {
			case 0:
				doAlipayWap();
				break;
			case 1:
				doNoMdoMGPAliapy();
				break;
			case 2:
				doNoMdoUPPay();
				break;
			case 3:
				doTenPay();
				break;
			case 4:
				doNoMO9Pay();
				break;

			}
		}
	}
	
	
	/***
	 * 处理MDO的支付方式
	 * @param position
	 */
	private void doMDOClick(int position){
		switch (position) {
		case 0:
			CMBILogManager.action_B_Payway1_MDO(mActivity);
			mdo(mCurrentOrderID);
			break;
		case 1:
			doAlipayWap();
			
			break;
		case 2:
			//打开支付宝极简收银台
			CMBILogManager.action_B_Payway1_AlipaySY(mActivity);
			doAlipay();
			break;
		case 3:
			CMBILogManager.action_B_Payway1_UPPay(mActivity);
			UPPay();
			break;
		case 4:
			doTenPay();
			break;
		case 5:
			CMBILogManager.action_B_Payway1_MO9(mActivity);
			MO9();
			break;
		}
	}

	@Override
	public void onItemClick(AdapterView<?> parent, View view, int position,
			long id) {
		if(isMBO){
			doMDOClick(position);
		}else{
			doNoMDOClick(position);
		}
	}

	private void doNoMdoWeixinPay(){
		if(NetWorkUtils.isNetworkConnected(mActivity)){
			//微信支付
			WeixinPayModel weixinPay=WeixinPayModel.getInstance();
			weixinPay.setActivity(this.getActivity());
			weixinPay.startPay(mUID,mGoodsItem,mCurrentOrderID);
		}else{
			showNetErrorToast();
		}
	}
	

	@Override
	public void onClick(View v) {
		if(v.getId()==PayResource.getInstance(mActivity).mgp_title_left_ibtn){
			((CYMGPaymentActivity)mActivity).goback();
		}
	}
	
	/**
	 * toast方式提示网络错误
	 */
	private void showNetErrorToast(){
		MyToast.showToast(mActivity,mActivity.getString(PayResource.getInstance(mActivity).mgp_payment_net_error_toast_txt));
	}
	
	
	/**
	 * 
	 * 功能描述：向服务器请求手机短信支付数�?
	 *
	 * @author 徐萌�?xumengyang)
	 * @param 
	 * @return void
	 * @date 2014-3-15 下午3:12:32
	 *
	 */
	private void mdo(String orderID){
		RequestParams params = new RequestParams();
		params.put("order_id", orderID);
		mHttpClient = new MyHttpClient(mActivity);
		mHttpClient.get(HttpContants.getURL(HttpContants.MDO), params, new MyAsyncResponseHandler(){
			
			@Override
			public void onStart() {
				mWaitingDialog.setDismissListener(mHttpClient.getTimeout(), new MyDialogDismissListener() {
					
					@Override
					public void onTimeOutDismiss() {
						showNetErrorToast();
					}
				});
				WaitingDialog.showWaitingDialog(mWaitingDialog);
			}
			
			@Override
			public void onSuccess(int statusCode, String content) {
				log.d("mdo result = "+content);
				WaitingDialog.DismissWaitingDialog(mWaitingDialog);
				try {
					MDOEntity e = JSONUtil.getMapper().readValue(content, new TypeReference<MDOEntity>() {
					});
					if(e != null){
						if(isDestroy){
							log.d("CYMGPaymentWayFragment isDestroy");
							return;
						}
						Uri uri = Uri.parse("smsto:"+e.getMsgphone());
						Intent intent = new Intent(Intent.ACTION_SENDTO,uri);
						intent.putExtra("sms_body", e.getMsgcontent());
						mActivity.startActivity(intent);
					}else{
						log.e("e is null");
					}
				} catch (Exception e) {
					log.e(e);
				}
			}
			
			@Override
			public void onFailure(Throwable error, String content) {
				log.e("mdo result = "+content);
				WaitingDialog.DismissWaitingDialog(mWaitingDialog);
				try {
					MDOEntity e = JSONUtil.getMapper().readValue(content, new TypeReference<MDOEntity>() {
					});
					Toast.makeText(mActivity, e.getClient_message(), Toast.LENGTH_LONG).show();
				} catch (Exception e) {
					log.e(e);
				}
			}
			
		});
	}
	
	/**
	 * 
	 * 功能描述：银联支付
	 *
	 * @author 严峥(yanzheng)
	 * @param @param b
	 * @return void
	 * @date 2014-4-28 下午3:05:32
	 *
	 * 修改历史 ：(修改人，修改时间，修改原因/内容)
	 */
	public void UPPay(){
		if(NetWorkUtils.isNetworkConnected(mActivity)){
			log.d("UPPay");
//			GoodsItem goodsItem=(GoodsItem) mBundle.getSerializable(Params.GOODSITEM);
			mHttpClient = new MyHttpClient(mActivity);
			RequestParams map = new RequestParams();
			map.put("order_id", mCurrentOrderID);
			map.put("goods_price", mGoodsItem.getGoods_price());
			mHttpClient.get(HttpContants.getURL(HttpContants.UPPAY_TN), map, new MyAsyncResponseHandler(){
				
				@Override
				public void onStart() {
					mWaitingDialog.setDismissListener(mHttpClient.getTimeout(), new MyDialogDismissListener() {
						
						@Override
						public void onTimeOutDismiss() {
							showNetErrorToast();
						}
					});
					WaitingDialog.showWaitingDialog(mWaitingDialog);
				}
				
				@Override
				public void onSuccess(int statusCode, String content) {
					log.d("onSuccess,content:"+content);
					WaitingDialog.DismissWaitingDialog(mWaitingDialog);
					if(!TextUtils.isEmpty(content)){
						try {
							JSONObject jsonObject=new JSONObject(content);
							int status=jsonObject.getInt("status");
							switch (status) {
							case 1:
								String tn=jsonObject.getString("tn");
								String mode="00";//正式
								if(SDKConfig.DEBUG){
//									mode="01";//测试
								}
								if(isDestroy){
									log.d("CYMGPaymentWayFragment isDestroy");
									return;
								}
								UPPayAssistEx.startPayByJAR(mActivity, PayActivity.class, null, null, tn, mode);
								break;
							default:
								log.d("UPPay获取TN流水号失败，status："+status);
								showNetErrorToast();
								break;
							}
						} catch (JSONException e) {
							log.e(e);
						}
					}
				}
				
				@Override
				public void onFailure(int statusCode, Throwable error,
						String content) {
					log.d("onFailure,content:"+content);
					WaitingDialog.DismissWaitingDialog(mWaitingDialog);
					showNetErrorToast();
				}
			});
		}else{
			showNetErrorToast();
		}
	}
	
	/**
	 * 
	 * 功能描述：MO9现玩后付
	 *
	 * @author 严峥(yanzheng)
	 * @param 
	 * @return void
	 * @date 2014-5-9 上午9:56:29
	 *
	 * 修改历史 ：(修改人，修改时间，修改原因/内容)
	 */
	private void MO9(){
		if(NetWorkUtils.isNetworkConnected(mActivity)){
			log.d("MO9Pay");
//			GoodsItem goodsItem=(GoodsItem) mBundle.getSerializable(Params.GOODSITEM);
			String goodsName=mGoodsItem.getGoods_name();
			String item_name=null;
			try {
				item_name=new String(goodsName.getBytes(), "UTF-8");
			} catch (Exception e) {
				log.e(e);
			} 
			mHttpClient = new MyHttpClient(mActivity);
			RequestParams map = new RequestParams();
			map.put("lc", "CN");
			map.put("amount", mGoodsItem.getGoods_price());
			map.put("currency", "CNY");
			map.put("item_name", item_name);
			map.put("return_url", HttpContants.getMo9ReturnUrl());
			map.put("invoice", mBundle.getString(Params.ORDER_ID));
			mHttpClient.post(HttpContants.getURL(HttpContants.MO9_PAY), map, new MyAsyncResponseHandler(){
				
				@Override
				public void onStart() {
					mWaitingDialog.setDismissListener(mHttpClient.getTimeout(), new MyDialogDismissListener() {
						
						@Override
						public void onTimeOutDismiss() {
							showNetErrorToast();
						}
					});
					WaitingDialog.showWaitingDialog(mWaitingDialog);
				}
				
				@Override
				public void onSuccess(int statusCode, String content) {
					log.d("onSuccess,content:"+content);
					WaitingDialog.DismissWaitingDialog(mWaitingDialog);
					if(!TextUtils.isEmpty(content)){
						try {
							JSONObject jsonObject=new JSONObject(content);
							String url=jsonObject.getString("targetUrl");
							if(isDestroy){
								log.d("CYMGPaymentWayFragment isDestroy");
								return;
							}
							mBundle.putString("mo9_url", url);
							((CYMGPaymentActivity)mActivity).changeFragment(Contants.FragmentTag.PAYMENT_MO9_FRAGMENT_TAG, mBundle);
						} catch (JSONException e) {
							log.e(e);
						}
					}else{
						showNetErrorToast();
					}
				}
				
				@Override
				public void onFailure(int statusCode, Throwable error,
						String content) {
					log.d("onFailure,content:"+content);
					WaitingDialog.DismissWaitingDialog(mWaitingDialog);
					showNetErrorToast();
				}
			});
		}else{
			showNetErrorToast();
		}
	}
	
	private void createOrderFromServer(final GoodsItem item){
		if(mCreating){
			return;
		}
		mCreating = true;
		final String mUID = mBundle.getString(CYMGProtocolKeys.UID);
		if(TextUtils.isEmpty(mUID) || mUID == null){
			throw new IllegalAccessError("uid is null");
		}
		if(NetWorkUtils.isNetworkConnected(mActivity)){
			MyHttpClient mCreateOrderHttp = new MyHttpClient(mActivity);
			Map<String,String> params = new HashMap<String, String>();
			String type = UserInfoSPUtil.getType(mActivity);
			String account_id = UserInfoSPUtil.getUsername(mActivity);
			if(Contants.LoginParams.TYPE_CYOU.equals(type) 
					&& MetaDataValueUtils.getChannelID(mActivity) == mActivity.getString(AccResource.getInstance(mActivity).mgp_channel_cy)){
				if(!TextUtils.isEmpty(account_id)&&account_id!=null){
					params.put("account_id", account_id);
				}else{
					params.put("account_id", mUID);
				}
			}else{
				params.put("account_id", mUID);
			}
			params.put("user_id", mUID);
			params.put("goods_id", item.getGoods_id());
			params.put("goods_register_id",item.getGoods_register_id());
			params.put("goods_number", item.getGoods_number());
			params.put("goods_price", String.valueOf(item.getGoods_price()));
			params.put("push_info", mBundle.getString(CYMGProtocolKeys.PUSH_INFO));
			params.put("game_channel", MetaDataValueUtils.getCMBIChannelID(mActivity));
			if(mBundle.getString(CYMGProtocolKeys.ROLE_ID) != null){
				params.put("role_id", mBundle.getString(CYMGProtocolKeys.ROLE_ID));
			}
			if(mBundle.getString(CYMGProtocolKeys.GROUP_ID) != null){
				params.put("group_id", mBundle.getString(CYMGProtocolKeys.GROUP_ID));
			}
			mCreateOrderHttp.post(HttpContants.getURL(HttpContants.CREATE_ORDER_FROM_SERVER), params, new MyAsyncResponseHandler(){
				@Override
				public void onStart() {
					mWaitingDialog.setMessage(mActivity.getString(PayResource.getInstance(mActivity).mgp_payment_creating_order));
					WaitingDialog.showWaitingDialog(mWaitingDialog);
				}
				
				@Override
				public void onSuccess(int statusCode, String content) {
					try {
						log.d("onSuccess:content = "+content);
						WaitingDialog.DismissWaitingDialog(mWaitingDialog);
						if(TextUtils.isEmpty(content)){
							mCreating = false;
							return;
						}
						JSONObject jsonObject = new JSONObject(content);
						mCurrentOrderID = jsonObject.getString("order_id");
						mOrderCallBack.onOrderCreate(mCurrentOrderID);
						mCreating = false;
					} catch (Exception e) {
						log.e(e);
					}
				}
				
				@Override
				public void onFailure(int arg0, Header[] arg1, byte[] arg2, Throwable arg3) {
					log.e("onFailure:content="+arg3.getMessage());
					mCreating = false;
					WaitingDialog.DismissWaitingDialog(mWaitingDialog);
					Toast.makeText(mActivity, PayResource.getInstance(mActivity).mgp_net_error_hint, Toast.LENGTH_LONG).show();
					((CYMGPaymentActivity)mActivity).goback();
//					getPaymentGoodsRequest();
				}
			});
		}else{
			mCreating = false;
			MyToast.showToast(mActivity, mActivity.getString(PayResource.getInstance(mActivity).mgp_payment_net_error_toast_txt));
		}
	}
	
	public interface OnOrderIDCreatedCallBack{
		public void onOrderCreate(String orderid);
	}
}
